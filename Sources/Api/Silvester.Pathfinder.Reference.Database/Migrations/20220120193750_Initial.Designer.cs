// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NpgsqlTypes;
using Silvester.Pathfinder.Reference.Database;

namespace Silvester.Pathfinder.Reference.Database.Migrations
{
    [DbContext(typeof(ReferenceDatabase))]
    [Migration("20220120193750_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AbilityTrait", b =>
                {
                    b.Property<Guid>("AbilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("AbilitiesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("AbilityTrait");
                });

            modelBuilder.Entity("ActionTrait", b =>
                {
                    b.Property<Guid>("ActionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("ActionsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("ActionTrait");
                });

            modelBuilder.Entity("ActivityTrait", b =>
                {
                    b.Property<Guid>("ActivitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("ActivitiesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("ActivityTrait");
                });

            modelBuilder.Entity("AlignmentDeity", b =>
                {
                    b.Property<Guid>("DeityFollowerAlignmentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FollowerAlignmentsId")
                        .HasColumnType("uuid");

                    b.HasKey("DeityFollowerAlignmentsId", "FollowerAlignmentsId");

                    b.HasIndex("FollowerAlignmentsId");

                    b.ToTable("AlignmentDeity");
                });

            modelBuilder.Entity("AlignmentEidolon", b =>
                {
                    b.Property<Guid>("EidolonsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequiredAlignmentsId")
                        .HasColumnType("uuid");

                    b.HasKey("EidolonsId", "RequiredAlignmentsId");

                    b.HasIndex("RequiredAlignmentsId");

                    b.ToTable("AlignmentEidolon");
                });

            modelBuilder.Entity("AncestryAncestrySize", b =>
                {
                    b.Property<Guid>("AncestriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizesId")
                        .HasColumnType("uuid");

                    b.HasKey("AncestriesId", "SizesId");

                    b.HasIndex("SizesId");

                    b.ToTable("AncestryAncestrySize");
                });

            modelBuilder.Entity("AncestryHeritage", b =>
                {
                    b.Property<Guid>("AncestriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HeritagesId")
                        .HasColumnType("uuid");

                    b.HasKey("AncestriesId", "HeritagesId");

                    b.HasIndex("HeritagesId");

                    b.ToTable("AncestryHeritage");
                });

            modelBuilder.Entity("AncestrySizeEidolon", b =>
                {
                    b.Property<Guid>("EidolonsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SizesId")
                        .HasColumnType("uuid");

                    b.HasKey("EidolonsId", "SizesId");

                    b.HasIndex("SizesId");

                    b.ToTable("AncestrySizeEidolon");
                });

            modelBuilder.Entity("AncestryTrait", b =>
                {
                    b.Property<Guid>("AncestriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AncestryTraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("AncestriesId", "AncestryTraitsId");

                    b.HasIndex("AncestryTraitsId");

                    b.ToTable("AncestryTrait");
                });

            modelBuilder.Entity("BackgroundTrait", b =>
                {
                    b.Property<Guid>("BackgroundsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("BackgroundsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("BackgroundTrait");
                });

            modelBuilder.Entity("BloodlineSkill", b =>
                {
                    b.Property<Guid>("BloodlineSkillsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BloodlinesId")
                        .HasColumnType("uuid");

                    b.HasKey("BloodlineSkillsId", "BloodlinesId");

                    b.HasIndex("BloodlinesId");

                    b.ToTable("BloodlineSkill");
                });

            modelBuilder.Entity("ClassStat", b =>
                {
                    b.Property<Guid>("KeyAbilitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("KeyAbilityClassesId")
                        .HasColumnType("uuid");

                    b.HasKey("KeyAbilitiesId", "KeyAbilityClassesId");

                    b.HasIndex("KeyAbilityClassesId");

                    b.ToTable("ClassStat");
                });

            modelBuilder.Entity("CreatureImmunity", b =>
                {
                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImmunitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("CreaturesId", "ImmunitiesId");

                    b.HasIndex("ImmunitiesId");

                    b.ToTable("CreatureImmunity");
                });

            modelBuilder.Entity("CreatureLanguage", b =>
                {
                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uuid");

                    b.HasKey("CreaturesId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("CreatureLanguage");
                });

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.Property<Guid>("CreatureEffectsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SummonedById")
                        .HasColumnType("uuid");

                    b.HasKey("CreatureEffectsId", "SummonedById");

                    b.HasIndex("SummonedById");

                    b.ToTable("CreatureSpell");
                });

            modelBuilder.Entity("CreatureTrait", b =>
                {
                    b.Property<Guid>("CreaturesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("CreaturesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("CreatureTrait");
                });

            modelBuilder.Entity("CurseTrait", b =>
                {
                    b.Property<Guid>("CursesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("CursesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("CurseTrait");
                });

            modelBuilder.Entity("DeityDivineFont", b =>
                {
                    b.Property<Guid>("DeitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivineFontsId")
                        .HasColumnType("uuid");

                    b.HasKey("DeitiesId", "DivineFontsId");

                    b.HasIndex("DivineFontsId");

                    b.ToTable("DeityDivineFont");
                });

            modelBuilder.Entity("DeityDomain", b =>
                {
                    b.Property<Guid>("DeitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DomainsId")
                        .HasColumnType("uuid");

                    b.HasKey("DeitiesId", "DomainsId");

                    b.HasIndex("DomainsId");

                    b.ToTable("DeityDomain");
                });

            modelBuilder.Entity("DeityMeleeWeapon", b =>
                {
                    b.Property<Guid>("FavoredById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FavoredMeleeWeaponsId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoredById", "FavoredMeleeWeaponsId");

                    b.HasIndex("FavoredMeleeWeaponsId");

                    b.ToTable("DeityMeleeWeapon");
                });

            modelBuilder.Entity("DeityRangedWeapon", b =>
                {
                    b.Property<Guid>("FavoredById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FavoredRangedWeaponId")
                        .HasColumnType("uuid");

                    b.HasKey("FavoredById", "FavoredRangedWeaponId");

                    b.HasIndex("FavoredRangedWeaponId");

                    b.ToTable("DeityRangedWeapon");
                });

            modelBuilder.Entity("DeitySkill", b =>
                {
                    b.Property<Guid>("DeitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivineSkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("DeitiesId", "DivineSkillsId");

                    b.HasIndex("DivineSkillsId");

                    b.ToTable("DeitySkill");
                });

            modelBuilder.Entity("DeityStat", b =>
                {
                    b.Property<Guid>("DeitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DivineStatsId")
                        .HasColumnType("uuid");

                    b.HasKey("DeitiesId", "DivineStatsId");

                    b.HasIndex("DivineStatsId");

                    b.ToTable("DeityStat");
                });

            modelBuilder.Entity("DeityUnarmedWeapon", b =>
                {
                    b.Property<Guid>("DeitiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FavoredUnarmedWeaponId")
                        .HasColumnType("uuid");

                    b.HasKey("DeitiesId", "FavoredUnarmedWeaponId");

                    b.HasIndex("FavoredUnarmedWeaponId");

                    b.ToTable("DeityUnarmedWeapon");
                });

            modelBuilder.Entity("DiseaseTrait", b =>
                {
                    b.Property<Guid>("DiseasesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("DiseasesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("DiseaseTrait");
                });

            modelBuilder.Entity("DomainMystery", b =>
                {
                    b.Property<Guid>("MysteriesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedDomainsId")
                        .HasColumnType("uuid");

                    b.HasKey("MysteriesId", "RelatedDomainsId");

                    b.HasIndex("RelatedDomainsId");

                    b.ToTable("DomainMystery");
                });

            modelBuilder.Entity("EidolonSense", b =>
                {
                    b.Property<Guid>("EidolonsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SensesId")
                        .HasColumnType("uuid");

                    b.HasKey("EidolonsId", "SensesId");

                    b.HasIndex("SensesId");

                    b.ToTable("EidolonSense");
                });

            modelBuilder.Entity("EidolonSkill", b =>
                {
                    b.Property<Guid>("EidolonsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("EidolonsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("EidolonSkill");
                });

            modelBuilder.Entity("EidolonTrait", b =>
                {
                    b.Property<Guid>("EidolonsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("EidolonsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("EidolonTrait");
                });

            modelBuilder.Entity("FeatTrait", b =>
                {
                    b.Property<Guid>("FeatsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("FeatsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("FeatTrait");
                });

            modelBuilder.Entity("GunslingersWaySkill", b =>
                {
                    b.Property<Guid>("GunslingersWaysId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WaySkillIdOptionsId")
                        .HasColumnType("uuid");

                    b.HasKey("GunslingersWaysId", "WaySkillIdOptionsId");

                    b.HasIndex("WaySkillIdOptionsId");

                    b.ToTable("GunslingersWaySkill");
                });

            modelBuilder.Entity("HazardImmunity", b =>
                {
                    b.Property<Guid>("HazardsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ImmunitiesId")
                        .HasColumnType("uuid");

                    b.HasKey("HazardsId", "ImmunitiesId");

                    b.HasIndex("ImmunitiesId");

                    b.ToTable("HazardImmunity");
                });

            modelBuilder.Entity("HazardTrait", b =>
                {
                    b.Property<Guid>("HazardsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("HazardsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("HazardTrait");
                });

            modelBuilder.Entity("ItemCurseTrait", b =>
                {
                    b.Property<Guid>("ItemCursesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("ItemCursesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("ItemCurseTrait");
                });

            modelBuilder.Entity("MagicTraditionSpell", b =>
                {
                    b.Property<Guid>("SpellsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraditionsId")
                        .HasColumnType("uuid");

                    b.HasKey("SpellsId", "TraditionsId");

                    b.HasIndex("TraditionsId");

                    b.ToTable("MagicTraditionSpell");
                });

            modelBuilder.Entity("PatronThemeSpell", b =>
                {
                    b.Property<Guid>("GrantedSpellOptionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PatronThemesId")
                        .HasColumnType("uuid");

                    b.HasKey("GrantedSpellOptionsId", "PatronThemesId");

                    b.HasIndex("PatronThemesId");

                    b.ToTable("PatronThemeSpell");
                });

            modelBuilder.Entity("PlaneTrait", b =>
                {
                    b.Property<Guid>("PlanesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("PlanesId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PlaneTrait");
                });

            modelBuilder.Entity("PlayModeSkillAction", b =>
                {
                    b.Property<Guid>("RequiredPlayModesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillActionsId")
                        .HasColumnType("uuid");

                    b.HasKey("RequiredPlayModesId", "SkillActionsId");

                    b.HasIndex("SkillActionsId");

                    b.ToTable("PlayModeSkillAction");
                });

            modelBuilder.Entity("PreciousMaterialArmorTrait", b =>
                {
                    b.Property<Guid>("PreciousMaterialArmorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("PreciousMaterialArmorsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PreciousMaterialArmorTrait");
                });

            modelBuilder.Entity("PreciousMaterialShieldTrait", b =>
                {
                    b.Property<Guid>("PreciousMaterialShieldsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("PreciousMaterialShieldsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PreciousMaterialShieldTrait");
                });

            modelBuilder.Entity("PreciousMaterialTrait", b =>
                {
                    b.Property<Guid>("PreciousMaterialsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("PreciousMaterialsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PreciousMaterialTrait");
                });

            modelBuilder.Entity("PreciousMaterialWeaponTrait", b =>
                {
                    b.Property<Guid>("PreciousMaterialWeaponsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("PreciousMaterialWeaponsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PreciousMaterialWeaponTrait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Choices.Choice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Choice");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Choice");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.EffectIncrement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TriggerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("TriggerId");

                    b.ToTable("EffectIncrement");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EffectIncrement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Triggers.EffectIncrementTrigger", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EffectIncrementTrigger");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EffectIncrementTrigger");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("BaseEffect");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffectBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BooleanEffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BooleanEffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("BooleanEffectBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.ChoiceEffectBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChoiceEffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceEffectId");

                    b.HasIndex("EffectId");

                    b.ToTable("ChoiceEffectBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Ability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<Guid?>("RollableEffectId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Trigger")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("RollableEffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Action", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<Guid?>("RollableEffectId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Requirements", "Trigger" });

                    b.Property<string>("Trigger")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("RollableEffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Activities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PhilosophyId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("PhilosophyId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Alignments");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Ancestry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("integer");

                    b.Property<int>("BaseSpeed")
                        .HasColumnType("integer");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SampleNames")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("RarityId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Ancestries");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.AncestrySize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BreadthReach")
                        .HasColumnType("integer");

                    b.Property<int>("HeightReach")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<int>("Space")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("AncestrySizes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.AnimalCompanion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AnimalCompanion");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ArcaneThesis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid?>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("ArcaneThesis");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Archetype", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DedicationFeatId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsMulticlassArchetype")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DedicationFeatId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Archetypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("ArmorCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ArmorSpecializationEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "ArmorSpecializationEffect" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("ArmorGroups");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.AttackType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("AttackTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Background", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("RarityId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Backgrounds");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.BenefitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BenefitTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Bloodline", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvancedBloodlineSpellId")
                        .HasColumnType("uuid");

                    b.Property<string>("BloodMagic")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GreaterBloodlineSpellId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitialBloodlineSpellId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "BloodMagic" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpellListTraditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedBloodlineSpellId");

                    b.HasIndex("EffectId");

                    b.HasIndex("GreaterBloodlineSpellId");

                    b.HasIndex("InitialBloodlineSpellId");

                    b.HasIndex("RarityId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("SpellListTraditionId");

                    b.ToTable("Bloodlines");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Bulk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BulkWeight")
                        .HasColumnType("integer");

                    b.Property<int>("LightWeight")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bulks");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Cause", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlignmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Exalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("ClassId");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Causes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvancedWeaponProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("BaseHealth")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ClassDcProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DuringCombatEncounters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DuringSocialEncounters")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("FortitudeProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HeavyArmorProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("InDowntime")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("LightArmorProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MartialWeaponProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediumArmorProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PerceptionProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PredefinedMagicTraditionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReflexProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description", "WhileExploring" });

                    b.Property<Guid>("SimpleWeaponProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpellAttackProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpellDcProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnarmedWeaponProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnarmoredProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("WhileExploring")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WillProficiencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedWeaponProficiencyId");

                    b.HasIndex("ClassDcProficiencyId");

                    b.HasIndex("FortitudeProficiencyId");

                    b.HasIndex("HeavyArmorProficiencyId");

                    b.HasIndex("LightArmorProficiencyId");

                    b.HasIndex("MartialWeaponProficiencyId");

                    b.HasIndex("MediumArmorProficiencyId");

                    b.HasIndex("PerceptionProficiencyId");

                    b.HasIndex("PredefinedMagicTraditionId");

                    b.HasIndex("ReflexProficiencyId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SimpleWeaponProficiencyId");

                    b.HasIndex("SpellAttackProficiencyId");

                    b.HasIndex("SpellDcProficiencyId");

                    b.HasIndex("UnarmedWeaponProficiencyId");

                    b.HasIndex("UnarmoredProficiencyId");

                    b.HasIndex("WillProficiencyId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassCharacteristic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassCharacteristic");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("ClassFeatures");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassFeatureBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassFeatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassFeatureId");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassFeatureBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassMannerism", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("ClassMannerism");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConditionCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OverridesConditionId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid?>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConditionCategoryId");

                    b.HasIndex("OverridesConditionId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ConditionCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("ConditionCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlignmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AncestryId")
                        .HasColumnType("uuid");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<string>("BurrowingSpeed")
                        .HasColumnType("text");

                    b.Property<int>("CharismaModifier")
                        .HasColumnType("integer");

                    b.Property<int>("ConstitutionModifier")
                        .HasColumnType("integer");

                    b.Property<int>("DexterityModifier")
                        .HasColumnType("integer");

                    b.Property<string>("FlyingSpeed")
                        .HasColumnType("text");

                    b.Property<string>("FortitudeAddendum")
                        .HasColumnType("text");

                    b.Property<int>("FortitudeModifier")
                        .HasColumnType("integer");

                    b.Property<int>("HitPoints")
                        .HasColumnType("integer");

                    b.Property<int>("IntelligenceModifier")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageAddendum")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PerceptionAddendum")
                        .HasColumnType("text");

                    b.Property<int>("PerceptionModifier")
                        .HasColumnType("integer");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RecallKnowledgeId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReflexAddendum")
                        .HasColumnType("text");

                    b.Property<int>("ReflexModifier")
                        .HasColumnType("integer");

                    b.Property<string>("Resistances")
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<int>("StrengthModifier")
                        .HasColumnType("integer");

                    b.Property<string>("WalkingSpeed")
                        .HasColumnType("text");

                    b.Property<string>("WillAddendum")
                        .HasColumnType("text");

                    b.Property<int>("WillModifier")
                        .HasColumnType("integer");

                    b.Property<int>("WisdomModifier")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("AncestryId");

                    b.HasIndex("RarityId");

                    b.HasIndex("RecallKnowledgeId")
                        .IsUnique();

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SizeId");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Creature");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureFlavor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.ToTable("CreatureFlavor");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureRecallKnowledge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<int>("DifficultyCheck")
                        .HasColumnType("integer");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SkillId");

                    b.ToTable("CreatureRecallKnowledge");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureSense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Addendum")
                        .HasColumnType("text");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Variant")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("SenseId");

                    b.ToTable("CreatureSense");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatureId")
                        .HasColumnType("uuid");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatureId");

                    b.HasIndex("SkillId");

                    b.ToTable("CreatureSkill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Curse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("DifficultyCheck")
                        .HasColumnType("integer");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SavingThrowStatId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Effect" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SavingThrowStatId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Curses");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("DamageTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlignmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Anathema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AreasOfConcern")
                        .HasColumnType("text");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DevoteeEffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DivineIntercessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Edicts")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Anathema", "Edicts", "AreasOfConcern" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DevoteeEffectId");

                    b.HasIndex("DivineIntercessionId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Deities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DeityCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("DeityCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("DifficultyCheck")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Onset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SavingThrowStatId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description", "Onset" });

                    b.Property<Guid?>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Spoilers")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("SavingThrowStatId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uuid");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("interval");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.ToTable("DiseaseStage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStageEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DiseaseStageId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Permanent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseStageId");

                    b.ToTable("DiseaseStageEffect");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DiseaseStageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineAlly", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("DivineAllies");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineFont", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("DivineFonts");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineIntercession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MajorBoon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MajorCurse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MinorBoon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MinorCurse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModerateBoon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModerateCurse")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SourcePageId");

                    b.ToTable("DivineIntercession");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Doctrine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Doctrines");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Domain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Domains");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DraconicExemplar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Dragon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EffectShapeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SavingThrowStatId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Dragon" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("EffectShapeId");

                    b.HasIndex("SavingThrowStatId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("DraconicExemplars");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DruidicOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("DruidicOrders");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EffectShape", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("EffectShape");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MagicTraditionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.Property<string>("SuggestedAttacks")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MagicTraditionId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Eidolons");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EidolonAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EidolonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("EidolonId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("EidolonAbility");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EidolonHomePlane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EidolonId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PlaneId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EidolonId");

                    b.HasIndex("PlaneId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("EidolonHomePlane");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EidolonVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<int>("Charisma")
                        .HasColumnType("integer");

                    b.Property<int>("Constitution")
                        .HasColumnType("integer");

                    b.Property<int>("Dexterity")
                        .HasColumnType("integer");

                    b.Property<int>("DexterityCap")
                        .HasColumnType("integer");

                    b.Property<Guid>("EidolonId")
                        .HasColumnType("uuid");

                    b.Property<int>("Intelligence")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<int>("Strength")
                        .HasColumnType("integer");

                    b.Property<int>("Wisdom")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EidolonId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("EidolonVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.FamiliarAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("FamiliarAbilities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArchetypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("CanBeLearnedMoreThanOnce")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<Guid?>("RollableEffectId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Special")
                        .HasColumnType("text");

                    b.Property<string>("Trigger")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ArchetypeId");

                    b.HasIndex("EffectId");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("RollableEffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Feats");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.FeatRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FeatId");

                    b.ToTable("FeatRequirement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Frequency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeSpan>("TimeSpan")
                        .HasColumnType("interval");

                    b.HasKey("Id");

                    b.ToTable("Frequency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.GunslingersWay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvancedDeedId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GreaterDeedId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitialDeedId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SlingersReloadId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedDeedId");

                    b.HasIndex("EffectId");

                    b.HasIndex("GreaterDeedId");

                    b.HasIndex("InitialDeedId");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SlingersReloadId");

                    b.HasIndex("SourcePageId");

                    b.ToTable("GunslingersWays");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HarrowCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlignmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HarrowCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("HarrowCategoryId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("HarrowCards");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HarrowCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AffectedStatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Effects")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Effects", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("AffectedStatId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("HarrowCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HarrowMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("HarrowModes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("ArmorClass")
                        .HasColumnType("integer");

                    b.Property<bool>("CanBeDetectedMagically")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ComplexityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Fortitude")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Reflex")
                        .HasColumnType("integer");

                    b.Property<string>("Reset")
                        .HasColumnType("text");

                    b.Property<int?>("RoutineActions")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Speed")
                        .HasColumnType("integer");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComplexityId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TypeId");

                    b.ToTable("Hazards");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardComplexity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("HazardComplexities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Addendum")
                        .HasColumnType("text");

                    b.Property<int?>("BrokenThreshold")
                        .HasColumnType("integer");

                    b.Property<int?>("Hardness")
                        .HasColumnType("integer");

                    b.Property<Guid>("HazardId")
                        .HasColumnType("uuid");

                    b.Property<int>("HitPoints")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.ToTable("HazardComponent");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardDetectionRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Addendum")
                        .HasColumnType("text");

                    b.Property<int>("DifficultyCheck")
                        .HasColumnType("integer");

                    b.Property<Guid>("HazardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.HasIndex("RequiredProficiencyId");

                    b.ToTable("HazardDetectionRequirement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardDisableRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DifficultyCheck")
                        .HasColumnType("integer");

                    b.Property<Guid>("HazardId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasIndex("SkillId");

                    b.ToTable("HazardDisableRequirement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardDispellRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CounteractDifficultyCheck")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("HazardId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HazardId");

                    b.ToTable("HazardDispellRequirement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("HazardTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Heritage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("RarityId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Heritages");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HuntersEdge", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("HuntersEdges");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HybridStudy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConfluxSpellId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EleventhSpellId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SeventhSpellId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ThirteenthSpellId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConfluxSpellId");

                    b.HasIndex("EffectId");

                    b.HasIndex("EleventhSpellId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SeventhSpellId");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("ThirteenthSpellId");

                    b.ToTable("HybridStudies");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Immunity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("HazardImmunities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BaseItemVariantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<Guid?>("HazardId")
                        .HasColumnType("uuid");

                    b.Property<string>("Kind")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<Guid?>("RollableEffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SpellId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StaggeredEffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Trigger")
                        .HasColumnType("text");

                    b.Property<Guid?>("UtilityGearId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("BaseItemId");

                    b.HasIndex("BaseItemVariantId");

                    b.HasIndex("HazardId");

                    b.HasIndex("RollableEffectId");

                    b.HasIndex("SpellId");

                    b.HasIndex("StaggeredEffectId")
                        .IsUnique();

                    b.HasIndex("UtilityGearId");

                    b.ToTable("InlineAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineActionTraitBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specifier")
                        .HasColumnType("text");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TraitId");

                    b.ToTable("InlineActionTraitBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAttack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttackTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("HazardId")
                        .HasColumnType("uuid");

                    b.Property<int>("HitModifier")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StaggeredEffectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("AttackTypeId");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("HazardId");

                    b.HasIndex("StaggeredEffectId");

                    b.ToTable("InlineAttack");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAttackTraitBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specifier")
                        .HasColumnType("text");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TraitId");

                    b.ToTable("InlineAttackTraitBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Innovation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TableId");

                    b.ToTable("Innovations");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InnovationModification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InnovationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("PrerequisiteId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("InnovationId");

                    b.HasIndex("PrerequisiteId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TypeId");

                    b.ToTable("InnovationModifications");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InnovationModificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("InnovationModificationTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Instinct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anathema")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("InstinctAbilityEffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RagingEffectId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("SpecializationAbility")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("InstinctAbilityEffectId");

                    b.HasIndex("RagingEffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TableId");

                    b.ToTable("Instincts");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InstinctAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TableId");

                    b.ToTable("InstinctAbilities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PageNumber")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("ItemCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ItemCurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("ItemCurses");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("TypeId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.LanguageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("LanguageTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Lore", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("StatModifierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("StatModifierId");

                    b.ToTable("Lores");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.LoreCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Examples")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("StatModifierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("StatModifierId");

                    b.ToTable("LoreCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicEssence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("MagicEssences");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RuneMagicSchoolId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description", "Abbreviation" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("MagicSchools");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("MagicTraditions");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MasterAbility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("MasterAbilities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Methodology", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Methodologies");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Muse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Muses");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvancedRevelationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GrantedCantripId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GreaterRevelationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitialRevelationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MysteryCurseId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "TrainedSkillAddendum" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("TrainedSkillAddendum")
                        .HasColumnType("text");

                    b.Property<Guid>("TrainedSkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedRevelationId")
                        .IsUnique();

                    b.HasIndex("EffectId");

                    b.HasIndex("GrantedCantripId")
                        .IsUnique();

                    b.HasIndex("GreaterRevelationId")
                        .IsUnique();

                    b.HasIndex("InitialRevelationId")
                        .IsUnique();

                    b.HasIndex("MysteryCurseId")
                        .IsUnique();

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TrainedSkillId");

                    b.ToTable("Mysteries");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MysteryCurse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MysteryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TableId");

                    b.ToTable("MysteryCurse");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MysteryCursePotency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MysteryCurseId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PotencyId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MysteryCurseId");

                    b.HasIndex("PotencyId");

                    b.ToTable("MysteryCursePotency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ObjectGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("ObjectGrade");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PatronTheme", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MagicTraditionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatronSkillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("MagicTraditionId");

                    b.HasIndex("PatronSkillId");

                    b.HasIndex("RarityId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("PatronThemes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Philosophy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Anathema")
                        .HasColumnType("text");

                    b.Property<string>("AreasOfConcern")
                        .HasColumnType("text");

                    b.Property<string>("Edicts")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Anathema", "AreasOfConcern", "Edicts" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Philosophies");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Plane", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AlignmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Planes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PlaneCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("PlaneCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PlayMode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PlayModes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Potencies");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ArmorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid?>("ShieldId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WeaponId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId")
                        .IsUnique();

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("ShieldId")
                        .IsUnique();

                    b.HasIndex("SourcePageId");

                    b.HasIndex("WeaponId")
                        .IsUnique();

                    b.ToTable("PreciousMaterials");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("PreciousMaterialArmors");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmorVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdditionalPricePerBulk")
                        .HasColumnType("integer");

                    b.Property<Guid>("ArmorId")
                        .HasColumnType("uuid");

                    b.Property<string>("CraftRequirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ArmorId");

                    b.HasIndex("GradeId");

                    b.ToTable("PreciousMaterialArmorVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialObjectCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("PreciousMaterialItemCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialObjectInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BrokenThreshold")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Hardness")
                        .HasColumnType("integer");

                    b.Property<int>("HitPoints")
                        .HasColumnType("integer");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GradeId");

                    b.HasIndex("MaterialId");

                    b.ToTable("PreciousMaterialObjectInformation");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShield", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("PreciousMaterialShields");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShieldVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("BrokenThreshold")
                        .HasColumnType("integer");

                    b.Property<Guid>("BulkId")
                        .HasColumnType("uuid");

                    b.Property<string>("CraftRequirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Hardness")
                        .HasColumnType("integer");

                    b.Property<int>("HitPoints")
                        .HasColumnType("integer");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("ShieldId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BulkId");

                    b.HasIndex("GradeId");

                    b.HasIndex("ShieldId");

                    b.ToTable("PreciousMaterialShieldVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("PreciousMaterialWeapons");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeaponVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AdditionalPricePerBulk")
                        .HasColumnType("integer");

                    b.Property<string>("CraftRequirements")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GradeId")
                        .HasColumnType("uuid");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeaponId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.HasIndex("WeaponId");

                    b.ToTable("PreciousMaterialWeaponVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Proficiencies");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Racket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Rackets");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Rarities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ResearchField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("ResearchFields");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CriticalFailure")
                        .HasColumnType("text");

                    b.Property<string>("CriticalSuccess")
                        .HasColumnType("text");

                    b.Property<string>("Failure")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "CriticalFailure", "CriticalSuccess", "Failure", "Success" });

                    b.Property<Guid?>("SpellId")
                        .HasColumnType("uuid");

                    b.Property<string>("Success")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SpellId");

                    b.ToTable("RollableEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Rule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Rules");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AdvancedRuneSpellId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InitialRuneSpellId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MagicSchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AdvancedRuneSpellId");

                    b.HasIndex("EffectId");

                    b.HasIndex("InitialRuneSpellId");

                    b.HasIndex("MagicSchoolId")
                        .IsUnique();

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("RuneMagics");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagicSchoolBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MagicSchoolId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RuneMagicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MagicSchoolId");

                    b.HasIndex("RuneMagicId");

                    b.ToTable("RuneMagicSchoolBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("SavingThrowStats");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Sense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Senses");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SenseAccuracy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("SenseAccuracy");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("HasArmorCheckPenalty")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasRecallKnowledgeAction")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("StatModifierId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("StatModifierId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("RequireProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<Guid?>("RollableEffectId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("RequireProficiencyId");

                    b.HasIndex("RollableEffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("TableId");

                    b.ToTable("SkillActions");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillActionExample", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("SkillActionId");

                    b.ToTable("SkillActionExample");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillBenefit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BenefitTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BenefitTypeId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillBenefit");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Page")
                        .HasColumnType("integer");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SourceId");

                    b.ToTable("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ActionTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Addendum")
                        .HasColumnType("text");

                    b.Property<Guid?>("AdvancedRevelationOfId")
                        .HasColumnType("uuid");

                    b.Property<string>("Area")
                        .HasColumnType("text");

                    b.Property<string>("CastTime")
                        .HasColumnType("text");

                    b.Property<Guid?>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cost")
                        .HasColumnType("text");

                    b.Property<Guid?>("DomainId")
                        .HasColumnType("uuid");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<Guid?>("GrantedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GreaterRevelationOfId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InitialRevelationOfId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDismissable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSavingThrowBasic")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid>("MagicSchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Range")
                        .HasColumnType("text");

                    b.Property<string>("Requirements")
                        .HasColumnType("text");

                    b.Property<Guid?>("SavingThrowStatId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Addendum", "Area", "CastTime", "Cost", "Duration", "Requirements", "Targets", "Trigger" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpellTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StaggeredEffectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TableId")
                        .HasColumnType("uuid");

                    b.Property<string>("Targets")
                        .HasColumnType("text");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid");

                    b.Property<string>("Trigger")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("ClassId");

                    b.HasIndex("DomainId");

                    b.HasIndex("MagicSchoolId");

                    b.HasIndex("SavingThrowStatId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.HasIndex("SpellTypeId");

                    b.HasIndex("StaggeredEffectId");

                    b.HasIndex("TableId");

                    b.HasIndex("TraitId");

                    b.ToTable("Spells");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("SpellComponents");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellHeightening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SpellId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.ToTable("SpellHeightening");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellTraitBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specifier")
                        .HasColumnType("text");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TraitId");

                    b.ToTable("SpellTraitBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("SpellTypes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Addendum")
                        .HasColumnType("text");

                    b.Property<int?>("DifficultyCheck")
                        .HasColumnType("integer");

                    b.Property<int?>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("MaximumDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Onset")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SavingThrowStatId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SavingThrowStatId");

                    b.ToTable("StaggeredEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Stage")
                        .HasColumnType("integer");

                    b.Property<Guid>("StaggeredEffectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StaggeredEffectId");

                    b.ToTable("StaggeredEffectStage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStageEffect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Permanent")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StaggeredEffectStageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("StaggeredEffectStageId");

                    b.ToTable("StaggeredEffectStageEffect");

                    b.HasDiscriminator<string>("Discriminator").HasValue("StaggeredEffectStageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectTraitBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specifier")
                        .HasColumnType("text");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TraitId");

                    b.ToTable("StaggeredEffectTraitBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description", "Abbreviation" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SwashbucklersStyle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EffectId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExemplaryFinisher")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Description" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("SwashbucklersStyle");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Tenet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Tenets");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UnarmedWeapon", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("UnarmedWeapons");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGear", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Usage")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("UtilityGear");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGearTraitBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specifier")
                        .HasColumnType("text");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TraitId");

                    b.ToTable("UtilityGearTraitBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGearVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BulkId")
                        .HasColumnType("uuid");

                    b.Property<int>("ItemLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UtilityGearId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BulkId");

                    b.HasIndex("RarityId");

                    b.HasIndex("UtilityGearId");

                    b.ToTable("UtilityGearVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.ToTable("WeaponCategories");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CriticalEffect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "CriticalEffect" });

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasIndex("SourcePageId");

                    b.ToTable("WeaponGroups");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessRequirements")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SourcePageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SourcePageId");

                    b.ToTable("BaseItem");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseItem");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemTraitBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specifier")
                        .HasColumnType("text");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TraitId");

                    b.ToTable("BaseItemTraitBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BulkId")
                        .HasColumnType("uuid");

                    b.Property<string>("CraftingRequirements")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RollableEffectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BulkId");

                    b.HasIndex("ItemId");

                    b.HasIndex("RarityId");

                    b.HasIndex("RollableEffectId");

                    b.ToTable("BaseItemVariant");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseItemVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CombinationWeaponComponent");

                    b.HasDiscriminator<string>("Discriminator").HasValue("CombinationWeaponComponent");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponComponentTraitBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Specifier")
                        .HasColumnType("text");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("TraitId");

                    b.ToTable("CombinationWeaponComponentTraitBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.PreciousMaterialGrade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PreciousMaterialGrade");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.StaveSpell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<Guid>("SpellId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("StaveVariantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SpellId");

                    b.HasIndex("StaveVariantId");

                    b.ToTable("StaveSpell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsNegated")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("BasePrerequisite");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BasePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisiteBinding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BooleanPrerequisiteId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrerequisiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("BooleanPrerequisiteId");

                    b.HasIndex("PrerequisiteId");

                    b.ToTable("BooleanPrerequisiteBinding");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Cell", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("RowId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RowId");

                    b.ToTable("Cell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Column", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Column");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Row", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Row");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Table");
                });

            modelBuilder.Entity("SkillActionTrait", b =>
                {
                    b.Property<Guid>("SkillActionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TraitsId")
                        .HasColumnType("uuid");

                    b.HasKey("SkillActionsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("SkillActionTrait");
                });

            modelBuilder.Entity("SkillSkillAction", b =>
                {
                    b.Property<Guid>("SkillActionsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillsId")
                        .HasColumnType("uuid");

                    b.HasKey("SkillActionsId", "SkillsId");

                    b.HasIndex("SkillsId");

                    b.ToTable("SkillSkillAction");
                });

            modelBuilder.Entity("SpellSpellComponent", b =>
                {
                    b.Property<Guid>("ComponentsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpellsId")
                        .HasColumnType("uuid");

                    b.HasKey("ComponentsId", "SpellsId");

                    b.HasIndex("SpellsId");

                    b.ToTable("SpellSpellComponent");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Choices.Instances.AnySkillChoice", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Choices.Choice");

                    b.HasDiscriminator().HasValue("AnySkillChoice");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Choices.Instances.AnyWeaponGroupChoice", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Choices.Choice");

                    b.HasDiscriminator().HasValue("AnyWeaponGroupChoice");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Choices.Instances.SpecificStatAnySkillChoice", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Choices.Choice");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("SpecificStatAnySkillChoice");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Instances.AddWeaponCategoryIncrement", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.EffectIncrement");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("AddWeaponCategoryIncrement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Instances.IncreaseAmountToIncrement", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.EffectIncrement");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("IncreaseAmountToIncrement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Instances.IncreaseLevelToIncrement", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.EffectIncrement");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("IncreaseLevelToIncrement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Instances.IncreaseProficiencyToIncrement", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.EffectIncrement");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("IncreaseProficiencyToIncrement");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Triggers.Instances.LevelTrigger", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Triggers.EffectIncrementTrigger");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("LevelTrigger");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Triggers.Instances.SkillProficiencyTrigger", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Triggers.EffectIncrementTrigger");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("SkillProficiencyTrigger");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.DisableAirBreathingEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("DisableAirBreathingEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.DisableFeatPrerequisitesEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("FeatId")
                        .HasColumnType("uuid")
                        .HasColumnName("DisableFeatPrerequisitesEffect_FeatId");

                    b.HasIndex("FeatId");

                    b.HasDiscriminator().HasValue("DisableFeatPrerequisitesEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.DisableLethalUnarmedAttackPenaltyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("DisableLethalUnarmedAttackPenaltyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.DisableRangedWeaponRangePenaltyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("RangeTier")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("DisableRangedWeaponRangePenaltyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.EnableSkillActionEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("EnableSkillActionEffect_SkillActionId");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("EnableSkillActionEffect_SkillId");

                    b.HasIndex("SkillActionId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("EnableSkillActionEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyAbilityBoostEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<bool>("IsChosenByGameMaster")
                        .HasColumnType("boolean");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text")
                        .HasColumnName("GainAnyAbilityBoostEffect_Restrictions");

                    b.HasDiscriminator().HasValue("GainAnyAbilityBoostEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyAlchemicalBombFormulaEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyAlchemicalBombFormulaEffect_Level");

                    b.HasDiscriminator().HasValue("GainAnyAlchemicalBombFormulaEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyAlchemicalPoisonFormulaEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyAlchemicalPoisonFormulaEffect_Level");

                    b.HasDiscriminator().HasValue("GainAnyAlchemicalPoisonFormulaEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyAncestryEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyAncestryEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyAncestryFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyAncestryFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyAnimalCompanionEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyAnimalCompanionEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyArcaneThesisEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyArcaneThesisEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyAssuranceEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyAssuranceEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyBackgroundEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyBackgroundEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyBloodlineEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyBloodlineEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyCauseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyCauseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyClassFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnyClassFeatEffect_ClassId");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyClassFeatEffect_Level");

                    b.HasIndex("ClassId");

                    b.HasDiscriminator().HasValue("GainAnyClassFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyCurseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyCurseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyDailyClassFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ClassId")
                        .HasColumnType("uuid");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyDailyClassFeatEffect_Level");

                    b.HasIndex("ClassId");

                    b.HasDiscriminator().HasValue("GainAnyDailyClassFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyDeityEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyDeityEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyDivineAllyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyDivineAllyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyDoctrineEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyDoctrineEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyDraconicExemplarEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyDraconicExemplarEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyDruidicOrderEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyDruidicOrderEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyEidolonEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyEidolonEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyFamiliarAbilityEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyFamiliarAbilityEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyFamiliarEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyFamiliarEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyFamiliarSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyFamiliarSpellEffect_Amount");

                    b.Property<int>("SpellLevel")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("GainAnyFamiliarSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyFormulaEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyFormulaEffect_Level");

                    b.HasDiscriminator().HasValue("GainAnyFormulaEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyGeneralFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyGeneralFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyGunslingersWayEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyGunslingersWayEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyHarrowEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyHarrowEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyHuntersEdgeEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyHuntersEdgeEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyHybridStudyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyHybridStudyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyInnovationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyInnovationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyInnovationModificationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("InnovationModificationTypeId")
                        .HasColumnType("uuid");

                    b.HasIndex("InnovationModificationTypeId");

                    b.HasDiscriminator().HasValue("GainAnyInnovationModificationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyInstinctEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyInstinctEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyLoreProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnyLoreProficiencyEffect_ProficiencyId");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text")
                        .HasColumnName("GainAnyLoreProficiencyEffect_Restrictions");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainAnyLoreProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyMethodologyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyMethodologyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyMulticlassDedicationFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyMulticlassDedicationFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyMuseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyMuseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyMutagenFormulaEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyMutagenFormulaEffect_Level");

                    b.HasDiscriminator().HasValue("GainAnyMutagenFormulaEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyMysteryEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyMysteryEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyPatronThemeEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyPatronThemeEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyProphecyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyProphecyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyPrototypeConstructCompanionEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyPrototypeConstructCompanionEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyResearchFieldEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyResearchFieldEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyRoguesRacketEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyRoguesRacketEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySavingThrowProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnySavingThrowProficiencyEffect_ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainAnySavingThrowProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySenseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Range")
                        .HasColumnType("text")
                        .HasColumnName("GainAnySenseEffect_Range");

                    b.Property<Guid>("SenseAccuracyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnySenseEffect_SenseAccuracyId");

                    b.HasIndex("SenseAccuracyId");

                    b.HasDiscriminator().HasValue("GainAnySenseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySkillFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnySkillFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySkillProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnySkillProficiencyEffect_ProficiencyId");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text")
                        .HasColumnName("GainAnySkillProficiencyEffect_Restrictions");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainAnySkillProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySkillSkillFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnySkillSkillFeatEffect_SkillId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("GainAnySkillSkillFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnySpellEffect_Level");

                    b.HasDiscriminator().HasValue("GainAnySpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyStatSkillFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("RequiredStatId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredStatId");

                    b.HasDiscriminator().HasValue("GainAnyStatSkillFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySwashbucklersStyleEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnySwashbucklersStyleEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyTenetEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyTenetEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyTraitSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainAnyTraitSpellEffect_Level");

                    b.Property<Guid>("RequiredTraitId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredTraitId");

                    b.HasDiscriminator().HasValue("GainAnyTraitSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyWeaponCategorySpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainAnyWeaponCategorySpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyWeaponGroupProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnyWeaponGroupProficiencyEffect_ProficiencyId");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainAnyWeaponGroupProficiencyEffect_WeaponCategoryId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("GainAnyWeaponGroupProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainChosenMethodologyStatSkillFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainChosenMethodologyStatSkillFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainChosenMysteryDomainSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainChosenMysteryDomainSpellEffect_Level");

                    b.HasDiscriminator().HasValue("GainChosenMysteryDomainSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainChosenSkillProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainChosenSkillProficiencyEffect_ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainChosenSkillProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainChosenWeaponGroupProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainChosenWeaponGroupProficiencyEffect_ProficiencyId");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainChosenWeaponGroupProficiencyEffect_WeaponCategoryId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("GainChosenWeaponGroupProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainCurrentWeaponSpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainCurrentWeaponSpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainDeityDivineFontEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainDeityDivineFontEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainDeityDivineSkillEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainDeityDivineSkillEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainDeityFavoredWeaponProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainDeityFavoredWeaponProficiencyEffect_ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainDeityFavoredWeaponProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainDeityFavoredWeaponSpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainDeityFavoredWeaponSpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainDeitySpellsEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainDeitySpellsEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainDivineFontSpellSlotEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainDivineFontSpellSlotEffect_Level");

                    b.HasDiscriminator().HasValue("GainDivineFontSpellSlotEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainFocusPoolPointEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainFocusPoolPointEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainFormulaBookEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("AddFormulasPerLevel")
                        .HasColumnType("integer");

                    b.Property<int>("FormulaAmount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("GainFormulaBookEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainInnovationArmorSpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainInnovationArmorSpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainInnovationWeaponSpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainInnovationWeaponSpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSingularExpertiseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("HighestProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSingularExpertiseEffect_WeaponGroupId");

                    b.HasIndex("HighestProficiencyId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("GainSingularExpertiseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSkillIncreaseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("GainSkillIncreaseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAbilityBoostEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificAbilityBoostEffect_StatId");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("GainSpecificAbilityBoostEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAbilityEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("AbilityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Range")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificAbilityEffect_Range");

                    b.HasIndex("AbilityId");

                    b.HasDiscriminator().HasValue("GainSpecificAbilityEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAbilityFlawEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificAbilityFlawEffect_StatId");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("GainSpecificAbilityFlawEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificActionCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificActionCircumstanceBonusEffect_ActionId");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificActionCircumstanceBonusEffect_Addendum");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificActionCircumstanceBonusEffect_Bonus");

                    b.HasIndex("ActionId");

                    b.HasDiscriminator().HasValue("GainSpecificActionCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAlchemicalBombProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificAlchemicalBombProficiencyEffect_ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificAlchemicalBombProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificArmorCategoryProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ArmorCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificArmorCategoryProficiencyEffect_ArmorCategoryId");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificArmorCategoryProficiencyEffect_ProficiencyId");

                    b.HasIndex("ArmorCategoryId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificArmorCategoryProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificArmorCategorySpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ArmorCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("ArmorCategoryId");

                    b.HasDiscriminator().HasValue("GainSpecificArmorCategorySpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificArmorEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ArmorId")
                        .HasColumnType("uuid");

                    b.HasIndex("ArmorId");

                    b.HasDiscriminator().HasValue("GainSpecificArmorEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificCauseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("CauseId")
                        .HasColumnType("uuid");

                    b.HasIndex("CauseId");

                    b.HasDiscriminator().HasValue("GainSpecificCauseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificClassDcProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificClassDcProficiencyEffect_ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificClassDcProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificConditionAnySavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificConditionAnySavingThrowCircumstanceBonusEffect_Add~");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificConditionAnySavingThrowCircumstanceBonusEffect_Bon~");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificConditionAnySavingThrowCircumstanceBonusEffect_Con~");

                    b.HasIndex("ConditionId");

                    b.HasDiscriminator().HasValue("GainSpecificConditionAnySavingThrowCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificDamageResistanceEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificDamageResistanceEffect_Addendum");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificDamageResistanceEffect_DamageTypeId");

                    b.Property<int>("Minimum")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificDamageResistanceEffect_Minimum");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificDamageResistanceEffect_Modifier");

                    b.Property<int>("ModifierInput")
                        .HasColumnType("integer");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificDamageResistanceEffect_ModifierType");

                    b.HasIndex("DamageTypeId");

                    b.HasDiscriminator().HasValue("GainSpecificDamageResistanceEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificDamageWeaknessEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificDamageWeaknessEffect_DamageTypeId");

                    b.Property<int>("Minimum")
                        .HasColumnType("integer");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificDamageWeaknessEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificDamageWeaknessEffect_ModifierType");

                    b.HasIndex("DamageTypeId");

                    b.HasDiscriminator().HasValue("GainSpecificDamageWeaknessEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificElixirFormulaEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("AlchemicalElixirId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PotencyId")
                        .HasColumnType("uuid");

                    b.HasIndex("AlchemicalElixirId");

                    b.HasIndex("PotencyId");

                    b.HasDiscriminator().HasValue("GainSpecificElixirFormulaEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("FeatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificFeatEffect_FeatId");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificFeatEffect_Restrictions");

                    b.HasIndex("FeatId");

                    b.HasDiscriminator().HasValue("GainSpecificFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificHeritageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("HeritageId")
                        .HasColumnType("uuid");

                    b.HasIndex("HeritageId");

                    b.HasDiscriminator().HasValue("GainSpecificHeritageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificHitpointsEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificHitpointsEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificHitpointsEffect_ModifierType");

                    b.HasDiscriminator().HasValue("GainSpecificHitpointsEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificInnateSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("MagicTraditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificInnateSpellEffect_MagicTraditionId");

                    b.Property<Guid>("SpellId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificInnateSpellEffect_SpellId");

                    b.HasIndex("MagicTraditionId");

                    b.HasIndex("SpellId");

                    b.HasDiscriminator().HasValue("GainSpecificInnateSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificInstinctAbilityEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("InstinctAbilityId")
                        .HasColumnType("uuid");

                    b.HasIndex("InstinctAbilityId");

                    b.HasDiscriminator().HasValue("GainSpecificInstinctAbilityEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificInstinctEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("InstinctId")
                        .HasColumnType("uuid");

                    b.HasIndex("InstinctId");

                    b.HasDiscriminator().HasValue("GainSpecificInstinctEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificKeyAbilityOptionEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificKeyAbilityOptionEffect_StatId");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("GainSpecificKeyAbilityOptionEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificLanguageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasIndex("LanguageId");

                    b.HasDiscriminator().HasValue("GainSpecificLanguageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificLevelSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificLevelSpellEffect_Level");

                    b.HasDiscriminator().HasValue("GainSpecificLevelSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificLoreCategoryProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("LoreCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificLoreCategoryProficiencyEffect_ProficiencyId");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificLoreCategoryProficiencyEffect_Restrictions");

                    b.HasIndex("LoreCategoryId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificLoreCategoryProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificLoreProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("LoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificLoreProficiencyEffect_ProficiencyId");

                    b.HasIndex("LoreId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificLoreProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicSchoolAnySavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificMagicSchoolAnySavingThrowCircumstanceBonusEffect_A~");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificMagicSchoolAnySavingThrowCircumstanceBonusEffect_B~");

                    b.Property<Guid>("MagicSchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificMagicSchoolAnySavingThrowCircumstanceBonusEffect_M~");

                    b.HasIndex("MagicSchoolId");

                    b.HasDiscriminator().HasValue("GainSpecificMagicSchoolAnySavingThrowCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicSchoolEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("MagicSchoolId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificMagicSchoolEffect_MagicSchoolId");

                    b.HasIndex("MagicSchoolId");

                    b.HasDiscriminator().HasValue("GainSpecificMagicSchoolEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicSchoolSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificMagicSchoolSpellEffect_Level");

                    b.Property<Guid>("MagicSchoolId")
                        .HasColumnType("uuid");

                    b.HasIndex("MagicSchoolId");

                    b.HasDiscriminator().HasValue("GainSpecificMagicSchoolSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicTraditionAnyInnateSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificMagicTraditionAnyInnateSpellEffect_Level");

                    b.Property<Guid>("MagicTraditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificMagicTraditionAnyInnateSpellEffect_MagicTraditionId");

                    b.HasIndex("MagicTraditionId");

                    b.HasDiscriminator().HasValue("GainSpecificMagicTraditionAnyInnateSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicTraditionAnySpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificMagicTraditionAnySpellEffect_Level");

                    b.Property<Guid>("MagicTraditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificMagicTraditionAnySpellEffect_MagicTraditionId");

                    b.HasIndex("MagicTraditionId");

                    b.HasDiscriminator().HasValue("GainSpecificMagicTraditionAnySpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMeleeWeaponEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("MeleeWeaponId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificMeleeWeaponEffect_MeleeWeaponId");

                    b.HasIndex("MeleeWeaponId");

                    b.HasDiscriminator().HasValue("GainSpecificMeleeWeaponEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMeleeWeaponProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("MeleeWeaponId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificMeleeWeaponProficiencyEffect_ProficiencyId");

                    b.HasIndex("MeleeWeaponId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificMeleeWeaponProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRangedWeaponProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificRangedWeaponProficiencyEffect_ProficiencyId");

                    b.Property<Guid>("RangedWeaponId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("RangedWeaponId");

                    b.HasDiscriminator().HasValue("GainSpecificRangedWeaponProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRarityAnyLanguageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificRarityAnyLanguageEffect_RarityId");

                    b.HasIndex("RarityId");

                    b.HasDiscriminator().HasValue("GainSpecificRarityAnyLanguageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRarityHeritageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid");

                    b.HasIndex("RarityId");

                    b.HasDiscriminator().HasValue("GainSpecificRarityHeritageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRuneMagicEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("RuneMagicId")
                        .HasColumnType("uuid");

                    b.HasIndex("RuneMagicId");

                    b.HasDiscriminator().HasValue("GainSpecificRuneMagicEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSavingThrowProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSavingThrowProficiencyEffect_ProficiencyId");

                    b.Property<Guid>("SavingThrowStatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSavingThrowProficiencyEffect_SavingThrowStatId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("SavingThrowStatId");

                    b.HasDiscriminator().HasValue("GainSpecificSavingThrowProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSenseEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Range")
                        .HasColumnType("text");

                    b.Property<Guid>("SenseAccuracyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SenseId")
                        .HasColumnType("uuid");

                    b.HasIndex("SenseAccuracyId");

                    b.HasIndex("SenseId");

                    b.HasDiscriminator().HasValue("GainSpecificSenseEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillActionCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSkillActionCircumstanceBonusEffect_Addendum");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillActionCircumstanceBonusEffect_Bonus");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillActionCircumstanceBonusEffect_SkillActionId");

                    b.HasIndex("SkillActionId");

                    b.HasDiscriminator().HasValue("GainSpecificSkillActionCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillActionSpecificSavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSkillActionSpecificSavingThrowCircumstanceBonusEff~");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillActionSpecificSavingThrowCircumstanceBonusEf~1");

                    b.Property<Guid>("SavingThrowStatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillActionSpecificSavingThrowCircumstanceBonusEf~2");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillActionSpecificSavingThrowCircumstanceBonusEf~3");

                    b.HasIndex("SavingThrowStatId");

                    b.HasIndex("SkillActionId")
                        .HasDatabaseName("IX_BaseEffect_GainSpecificSkillActionSpecificSavingThrowCircu~1");

                    b.HasDiscriminator().HasValue("GainSpecificSkillActionSpecificSavingThrowCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSkillCircumstanceBonusEffect_Addendum");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillCircumstanceBonusEffect_Bonus");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillCircumstanceBonusEffect_SkillId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("GainSpecificSkillCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillDcCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillDcCircumstanceBonusEffect_Bonus");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillDcCircumstanceBonusEffect_SkillId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("GainSpecificSkillDcCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillInitiativeCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillInitiativeCircumstanceBonusEffect_Bonus");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillInitiativeCircumstanceBonusEffect_SkillId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("GainSpecificSkillInitiativeCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillProficiencyEffect_ProficiencyId");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillProficiencyEffect_SkillId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("GainSpecificSkillProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificActionCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificActionCircumstanceBonusEffect_ActionId");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSkillSpecificActionCircumstanceBonusEffect_Addendum");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillSpecificActionCircumstanceBonusEffect_Bonus");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificActionCircumstanceBonusEffect_SkillId");

                    b.HasIndex("ActionId");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("IX_BaseEffect_GainSpecificSkillSpecificActionCircumstanceBonu~1");

                    b.HasDiscriminator().HasValue("GainSpecificSkillSpecificActionCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificActionDcCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificActionDcCircumstanceBonusEffect_Actio~");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSkillSpecificActionDcCircumstanceBonusEffect_Adden~");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillSpecificActionDcCircumstanceBonusEffect_Bonus");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificActionDcCircumstanceBonusEffect_Skill~");

                    b.HasIndex("ActionId");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("IX_BaseEffect_GainSpecificSkillSpecificActionDcCircumstanceBo~1");

                    b.HasDiscriminator().HasValue("GainSpecificSkillSpecificActionDcCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificSkillActionCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionCircumstanceBonusEffect_Ad~");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionCircumstanceBonusEffect_Bo~");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionCircumstanceBonusEffect_Sk~");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionCircumstanceBonusEffect_S~1");

                    b.HasIndex("SkillActionId");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("IX_BaseEffect_GainSpecificSkillSpecificSkillActionCircumstanc~1");

                    b.HasDiscriminator().HasValue("GainSpecificSkillSpecificSkillActionCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificSkillActionDcCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionDcCircumstanceBonusEffect_~");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionDcCircumstanceBonusEffect~1");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionDcCircumstanceBonusEffect~2");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSkillSpecificSkillActionDcCircumstanceBonusEffect~3");

                    b.HasIndex("SkillActionId");

                    b.HasIndex("SkillId")
                        .HasDatabaseName("IX_BaseEffect_GainSpecificSkillSpecificSkillActionDcCircumsta~1");

                    b.HasDiscriminator().HasValue("GainSpecificSkillSpecificSkillActionDcCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpeedEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificSpeedEffect_Addendum");

                    b.Property<int>("MovementMethod")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificSpeedEffect_MovementMethod");

                    b.Property<int>("Speed")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("GainSpecificSpeedEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellAttackProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSpellAttackProficiencyEffect_ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificSpellAttackProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellCastingEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("MagicTraditionId")
                        .HasColumnType("uuid");

                    b.HasIndex("MagicTraditionId");

                    b.HasDiscriminator().HasValue("GainSpecificSpellCastingEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellDcProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSpellDcProficiencyEffect_ProficiencyId");

                    b.HasIndex("ProficiencyId");

                    b.HasDiscriminator().HasValue("GainSpecificSpellDcProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Restrictions")
                        .HasColumnType("text");

                    b.Property<Guid>("SpellId")
                        .HasColumnType("uuid");

                    b.HasIndex("SpellId");

                    b.HasDiscriminator().HasValue("GainSpecificSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellSlotEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<bool>("IsSpendingPreventable")
                        .HasColumnType("boolean");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("GainSpecificSpellSlotEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellcastingAbilityEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificSpellcastingAbilityEffect_StatId");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("GainSpecificSpellcastingAbilityEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificStatSkillFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificStatSkillFeatEffect_StatId");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("GainSpecificStatSkillFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificStatSkillProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificStatSkillProficiencyEffect_ProficiencyId");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificStatSkillProficiencyEffect_StatId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("GainSpecificStatSkillProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitAnySavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("GainSpecificTraitAnySavingThrowCircumstanceBonusEffect_Addendum");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer")
                        .HasColumnName("GainSpecificTraitAnySavingThrowCircumstanceBonusEffect_Bonus");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificTraitAnySavingThrowCircumstanceBonusEffect_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("GainSpecificTraitAnySavingThrowCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificTraitEffect_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("GainSpecificTraitEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificTraitFeatEffect_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("GainSpecificTraitFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitSpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificTraitSpellEffect_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("GainSpecificTraitSpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificUnarmedAttackEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnarmedWeaponId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificUnarmedAttackEffect_WeaponGroupId");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("UnarmedWeaponId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("GainSpecificUnarmedAttackEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponCategoryProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificWeaponCategoryProficiencyEffect_ProficiencyId");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificWeaponCategoryProficiencyEffect_WeaponCategoryId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("GainSpecificWeaponCategoryProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponCategorySpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificWeaponCategorySpecializationEffect_WeaponCategoryId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("GainSpecificWeaponCategorySpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponGroupCircumstanceBonusEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Bonus")
                        .HasColumnType("integer");

                    b.Property<int>("RollType")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificWeaponGroupCircumstanceBonusEffect_WeaponGroupId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("GainSpecificWeaponGroupCircumstanceBonusEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponGroupProficiencyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProficiencyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificWeaponGroupProficiencyEffect_WeaponCategoryId");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("GainSpecificWeaponGroupProficiencyEffect_WeaponGroupId");

                    b.HasIndex("ProficiencyId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("GainSpecificWeaponGroupProficiencyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponGroupSpecializationEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("GainSpecificWeaponGroupSpecializationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpellBookEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("AddSpellsPerLevel")
                        .HasColumnType("integer");

                    b.Property<int>("CantripAmount")
                        .HasColumnType("integer");

                    b.Property<int>("SpellAmount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("GainSpellBookEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpellcastingAbilityEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("StatId")
                        .HasColumnType("uuid");

                    b.HasIndex("StatId");

                    b.HasDiscriminator().HasValue("GainSpellcastingAbilityEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveAnySavingThrowEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Becomes")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveAnySavingThrowEffect_Becomes");

                    b.Property<int>("InitialResult")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveAnySavingThrowEffect_InitialResult");

                    b.HasDiscriminator().HasValue("ImproveAnySavingThrowEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificActionCheckEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ActionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Becomes")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificActionCheckEffect_Becomes");

                    b.Property<int>("InitialResult")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificActionCheckEffect_InitialResult");

                    b.HasIndex("ActionId");

                    b.HasDiscriminator().HasValue("ImproveSpecificActionCheckEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificConditionAnySavingThrowEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("ImproveSpecificConditionAnySavingThrowEffect_Addendum");

                    b.Property<int>("Becomes")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificConditionAnySavingThrowEffect_Becomes");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImproveSpecificConditionAnySavingThrowEffect_ConditionId");

                    b.Property<int>("InitialResult")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificConditionAnySavingThrowEffect_InitialResult");

                    b.HasIndex("ConditionId");

                    b.HasDiscriminator().HasValue("ImproveSpecificConditionAnySavingThrowEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificSavingThrowEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Becomes")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificSavingThrowEffect_Becomes");

                    b.Property<int>("InitialResult")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificSavingThrowEffect_InitialResult");

                    b.Property<Guid>("SavingThrowStatId")
                        .HasColumnType("uuid");

                    b.HasIndex("SavingThrowStatId");

                    b.HasDiscriminator().HasValue("ImproveSpecificSavingThrowEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificSkillActionCheckEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Becomes")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificSkillActionCheckEffect_Becomes");

                    b.Property<int>("InitialResult")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificSkillActionCheckEffect_InitialResult");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImproveSpecificSkillActionCheckEffect_SkillActionId");

                    b.HasIndex("SkillActionId");

                    b.HasDiscriminator().HasValue("ImproveSpecificSkillActionCheckEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificSkillSpecificSkillActionCheckEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("ImproveSpecificSkillSpecificSkillActionCheckEffect_Addendum");

                    b.Property<int>("Becomes")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificSkillSpecificSkillActionCheckEffect_Becomes");

                    b.Property<int>("InitialResult")
                        .HasColumnType("integer")
                        .HasColumnName("ImproveSpecificSkillSpecificSkillActionCheckEffect_InitialResu~");

                    b.Property<Guid>("SkillActionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasIndex("SkillActionId");

                    b.HasIndex("SkillId");

                    b.HasDiscriminator().HasValue("ImproveSpecificSkillSpecificSkillActionCheckEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificTraitAnySavingThrowEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text");

                    b.Property<int>("Becomes")
                        .HasColumnType("integer");

                    b.Property<int>("InitialResult")
                        .HasColumnType("integer");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("ImproveSpecificTraitAnySavingThrowEffect_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("ImproveSpecificTraitAnySavingThrowEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.LoseAnySpellEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("LoseAnySpellEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.LoseSpecificTraitEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("TraitId")
                        .HasColumnType("uuid");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("LoseSpecificTraitEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ManualEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ManualEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyAncestryHitpointsEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyAncestryHitpointsEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyAncestryHitpointsEffect_ModifierType");

                    b.HasDiscriminator().HasValue("ModifyAncestryHitpointsEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyAncestrySizeEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uuid");

                    b.HasIndex("SizeId");

                    b.HasDiscriminator().HasValue("ModifyAncestrySizeEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyFallDistanceEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyFallDistanceEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyFallDistanceEffect_ModifierType");

                    b.HasDiscriminator().HasValue("ModifyFallDistanceEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyFeatEffectsEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("FeatId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifyFeatEffectsEffect_FeatId");

                    b.Property<Guid>("ModificationEffectId")
                        .HasColumnType("uuid");

                    b.HasIndex("FeatId");

                    b.HasIndex("ModificationEffectId");

                    b.HasDiscriminator().HasValue("ModifyFeatEffectsEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyFeatLevelPrerequisiteEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("FeatId")
                        .HasColumnType("uuid");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyFeatLevelPrerequisiteEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyFeatLevelPrerequisiteEffect_ModifierType");

                    b.HasIndex("FeatId");

                    b.HasDiscriminator().HasValue("ModifyFeatLevelPrerequisiteEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyMultipleAttackPenaltyEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<bool>("IsWithAgileWeapon")
                        .HasColumnType("boolean");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyMultipleAttackPenaltyEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyMultipleAttackPenaltyEffect_ModifierType");

                    b.Property<int>("MultipleAttackPenalty")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ModifyMultipleAttackPenaltyEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifySpecificConditionEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificConditionEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificConditionEffect_ModifierType");

                    b.HasIndex("ConditionId");

                    b.HasDiscriminator().HasValue("ModifySpecificConditionEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifySpecificSpeedEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificSpeedEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificSpeedEffect_ModifierType");

                    b.Property<int>("MovementMethod")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ModifySpecificSpeedEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifySpecificWeaponCategoryDamageDieAmountEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificWeaponCategoryDamageDieAmountEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificWeaponCategoryDamageDieAmountEffect_ModifierType");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("ModifySpecificWeaponCategoryDamageDieAmountEffect_WeaponCatego~");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("ModifySpecificWeaponCategoryDamageDieAmountEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifySpecificWeaponCategoryDamageDieSizeEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificWeaponCategoryDamageDieSizeEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifySpecificWeaponCategoryDamageDieSizeEffect_ModifierType");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("ModifySpecificWeaponCategoryDamageDieSizeEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyTemperatureEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyTemperatureEffect_Modifier");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer")
                        .HasColumnName("ModifyTemperatureEffect_ModifierType");

                    b.Property<int>("Temperature")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ModifyTemperatureEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyWeaponDamageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<int>("Modifier")
                        .HasColumnType("integer");

                    b.Property<int>("ModifierType")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("ModifyWeaponDamageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.NoopEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.HasDiscriminator().HasValue("NoopEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ProhibitSpecificFeatEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProhibitedFeatId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProhibitedFeatId");

                    b.HasDiscriminator().HasValue("ProhibitSpecificFeatEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ProhibitSpecificMagicSchoolEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ProhibitedMagicSchoolId")
                        .HasColumnType("uuid");

                    b.HasIndex("ProhibitedMagicSchoolId");

                    b.HasDiscriminator().HasValue("ProhibitSpecificMagicSchoolEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.UnlockSpecificTraitAncestryFeatsEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("AncestryTraitId")
                        .HasColumnType("uuid");

                    b.HasIndex("AncestryTraitId");

                    b.HasDiscriminator().HasValue("UnlockSpecificTraitAncestryFeatsEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<string>("Addendum")
                        .HasColumnType("text")
                        .HasColumnName("BooleanEffect_Addendum");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("BooleanEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.ChoiceEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect");

                    b.Property<Guid>("ChoiceId")
                        .HasColumnType("uuid");

                    b.HasIndex("ChoiceId");

                    b.HasDiscriminator().HasValue("ChoiceEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ConditionDiseaseStageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStageEffect");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Severity")
                        .HasColumnType("integer");

                    b.HasIndex("ConditionId");

                    b.HasDiscriminator().HasValue("ConditionDiseaseStageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageDiseaseStageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStageEffect");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Every")
                        .HasColumnType("text");

                    b.Property<bool>("IsDamagePersistent")
                        .HasColumnType("boolean");

                    b.HasIndex("DamageTypeId");

                    b.HasDiscriminator().HasValue("DamageDiseaseStageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.OtherDiseaseStageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStageEffect");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("OtherDiseaseStageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RecurrenceDiseaseStageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStageEffect");

                    b.Property<string>("DiseaseComesBackAfter")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("RecurrenceDiseaseStageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ConditionEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStageEffect");

                    b.Property<Guid>("ConditionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Severity")
                        .HasColumnType("integer");

                    b.HasIndex("ConditionId");

                    b.HasDiscriminator().HasValue("ConditionEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStageEffect");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Every")
                        .HasColumnType("text");

                    b.Property<bool>("IsDamagePersistent")
                        .HasColumnType("boolean");

                    b.HasIndex("DamageTypeId");

                    b.HasDiscriminator().HasValue("DamageEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.OtherEffect", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStageEffect");

                    b.Property<string>("Effect")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("OtherEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AdventuringGear", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.HasDiscriminator().HasValue("AdventuringGear");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalBomb", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<string>("Benefit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Drawback")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("AlchemicalBomb");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalElixir", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<string>("Benefit")
                        .HasColumnType("text")
                        .HasColumnName("AlchemicalElixir_Benefit");

                    b.Property<string>("Drawback")
                        .HasColumnType("text")
                        .HasColumnName("AlchemicalElixir_Drawback");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("AlchemicalElixir_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("AlchemicalElixir");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalPoison", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("AlchemicalPoison_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("AlchemicalPoison");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalTool", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("AlchemicalTool_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("AlchemicalTool");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Ammunition", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("Ammunition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Armor", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid>("ArmorCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ArmorGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("Armor_TraitId");

                    b.HasIndex("ArmorCategoryId");

                    b.HasIndex("ArmorGroupId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("Armor");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Artifact", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("AlignmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("Artifact_TraitId");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("Artifact");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.BeastGun", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("BeastGun_TraitId");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("BeastGun_WeaponGroupId");

                    b.HasIndex("TraitId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("BeastGun");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeapon", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("CombinationWeapon_TraitId");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CombinationWeapon_WeaponCategoryId");

                    b.HasIndex("TraitId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("CombinationWeapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeapon", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("MeleeWeapon_TraitId");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("MeleeWeapon_WeaponCategoryId");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("MeleeWeapon_WeaponGroupId");

                    b.HasIndex("TraitId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("MeleeWeapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.PreciousMaterialItem", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.HasDiscriminator().HasValue("PreciousMaterialItem");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RangedWeapon", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("RangedWeapon_TraitId");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("RangedWeapon_WeaponCategoryId");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("RangedWeapon_WeaponGroupId");

                    b.HasIndex("TraitId");

                    b.HasIndex("WeaponCategoryId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("RangedWeapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Rune", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.HasDiscriminator().HasValue("Rune");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Shield", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.HasDiscriminator().HasValue("Shield");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Stave", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("Stave_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("Stave");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.WornItem", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem");

                    b.HasDiscriminator().HasValue("WornItem");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AdventuringGearVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<string>("Hands")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("AdventuringGearVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalBombVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalBombVariant_Level");

                    b.Property<Guid>("PotencyId")
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalBombVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("AlchemicalBombVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AlchemicalBombVariant_Usage");

                    b.HasIndex("PotencyId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("AlchemicalBombVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalElixirVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalElixirVariant_Level");

                    b.Property<Guid>("PotencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("AlchemicalElixirVariant_PotencyId");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalElixirVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("AlchemicalElixirVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AlchemicalElixirVariant_Usage");

                    b.HasIndex("PotencyId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("AlchemicalElixirVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalPoisonVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalPoisonVariant_Level");

                    b.Property<Guid>("PoisonEffectId")
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalPoisonVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("AlchemicalPoisonVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AlchemicalPoisonVariant_Usage");

                    b.HasIndex("PoisonEffectId")
                        .IsUnique();

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("AlchemicalPoisonVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalToolVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalToolVariant_Level");

                    b.Property<Guid?>("PotencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("AlchemicalToolVariant_PotencyId");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("AlchemicalToolVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("AlchemicalToolVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("AlchemicalToolVariant_Usage");

                    b.HasIndex("PotencyId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("AlchemicalToolVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AmmunitionVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("BatchAmount")
                        .HasColumnType("integer");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("AmmunitionVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("AmmunitionVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("AmmunitionVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.ArmorVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("ArmorClassBonus")
                        .HasColumnType("integer");

                    b.Property<int>("CheckPenalty")
                        .HasColumnType("integer");

                    b.Property<int>("DexterityCap")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("ArmorVariant_Level");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("ArmorVariant_Price");

                    b.Property<int>("RequiredStrength")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("ArmorVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.Property<int>("SpeedPenalty")
                        .HasColumnType("integer");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("ArmorVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.ArtifactVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<Guid?>("AlignmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Destruction")
                        .HasColumnType("text");

                    b.Property<int?>("Hands")
                        .HasColumnType("integer")
                        .HasColumnName("ArtifactVariant_Hands");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("ArtifactVariant_Level");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("ArtifactVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Destruction", "Usage" });

                    b.Property<string>("Usage")
                        .HasColumnType("text")
                        .HasColumnName("ArtifactVariant_Usage");

                    b.HasIndex("AlignmentId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("ArtifactVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.BeastGunVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Hands")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("BeastGunVariant_Hands");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("BeastGunVariant_Level");

                    b.Property<Guid>("PotencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("BeastGunVariant_PotencyId");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("BeastGunVariant_Price");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.Property<int?>("Reload")
                        .HasColumnType("integer");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("BeastGunVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("PotencyId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("BeastGunVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<string>("Hands")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("CombinationWeaponVariant_Hands");

                    b.Property<Guid>("MeleeComponentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("CombinationWeaponVariant_Price");

                    b.Property<Guid>("RangedComponentId")
                        .HasColumnType("uuid");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("CombinationWeaponVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasIndex("MeleeComponentId");

                    b.HasIndex("RangedComponentId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("CombinationWeaponVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeaponVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MeleeWeaponVariant_Damage");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("MeleeWeaponVariant_DamageTypeId");

                    b.Property<string>("Hands")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("MeleeWeaponVariant_Hands");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("MeleeWeaponVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("MeleeWeaponVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("MeleeWeaponVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.PreciousMaterialItemVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("PreciousMaterialItemVariant_Level");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("PreciousMaterialItemVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("PreciousMaterialItemVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PreciousMaterialItemVariant_Usage");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("PreciousMaterialItemVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RangedWeaponVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("RangedWeaponVariant_Capacity");

                    b.Property<string>("Damage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RangedWeaponVariant_Damage");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("RangedWeaponVariant_DamageTypeId");

                    b.Property<string>("Hands")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RangedWeaponVariant_Hands");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("RangedWeaponVariant_Price");

                    b.Property<int>("Range")
                        .HasColumnType("integer")
                        .HasColumnName("RangedWeaponVariant_Range");

                    b.Property<int?>("Reload")
                        .HasColumnType("integer")
                        .HasColumnName("RangedWeaponVariant_Reload");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("RangedWeaponVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name" });

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("RangedWeaponVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RuneVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("RuneVariant_Level");

                    b.Property<Guid>("PotencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("RuneVariant_PotencyId");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("RuneVariant_Price");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RuneVariant_Usage");

                    b.HasIndex("PotencyId");

                    b.HasDiscriminator().HasValue("RuneVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.ShieldVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("ArmorClassBonus")
                        .HasColumnType("integer")
                        .HasColumnName("ShieldVariant_ArmorClassBonus");

                    b.Property<int>("BrokenThreshold")
                        .HasColumnType("integer");

                    b.Property<string>("Hands")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ShieldVariant_Hands");

                    b.Property<int>("Hardness")
                        .HasColumnType("integer");

                    b.Property<int>("HitPoints")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("ShieldVariant_Level");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("ShieldVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("ShieldVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<int>("SpeedPenalty")
                        .HasColumnType("integer")
                        .HasColumnName("ShieldVariant_SpeedPenalty");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ShieldVariant_Usage");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("ShieldVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.StaveVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<string>("Hands")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("StaveVariant_Hands");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("StaveVariant_Level");

                    b.Property<Guid>("PotencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("StaveVariant_PotencyId");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("StaveVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("StaveVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("StaveVariant_Usage");

                    b.HasIndex("PotencyId");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("StaveVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.WornItemVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("WornItemVariant_Level");

                    b.Property<int>("Price")
                        .HasColumnType("integer")
                        .HasColumnName("WornItemVariant_Price");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("WornItemVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("WornItemVariant_Usage");

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("WornItemVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponMeleeComponent", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponComponent");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("WeaponGroupId");

                    b.HasDiscriminator().HasValue("CombinationWeaponMeleeComponent");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponRangedComponent", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponComponent");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<Guid>("DamageTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("CombinationWeaponRangedComponent_DamageTypeId");

                    b.Property<int>("Range")
                        .HasColumnType("integer");

                    b.Property<int?>("Reload")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeaponGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("CombinationWeaponRangedComponent_WeaponGroupId");

                    b.HasIndex("DamageTypeId");

                    b.HasIndex("WeaponGroupId")
                        .HasDatabaseName("IX_CombinationWeaponComponent_CombinationWeaponRangedComponen~1");

                    b.HasDiscriminator().HasValue("CombinationWeaponRangedComponent");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<string>("Addendum")
                        .HasColumnType("text");

                    b.Property<int>("Operator")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("BooleanPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.FollowAnyPhilosophyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("FollowAnyPhilosophyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.FollowAnyReligionPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("FollowAnyReligionPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.FollowSpecificPhilosophyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredPhilosophyId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredPhilosophyId");

                    b.HasDiscriminator().HasValue("FollowSpecificPhilosophyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyAnimalCompanionPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyAnimalCompanionPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyArmorCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnyArmorCategorySpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyBloodlinePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyBloodlinePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyBloodlineSpecificMagicTraditionPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredMagicTraditionId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredMagicTraditionId");

                    b.HasDiscriminator().HasValue("HaveAnyBloodlineSpecificMagicTraditionPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificAlignmentPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredAlignmentId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredAlignmentId");

                    b.HasDiscriminator().HasValue("HaveAnyDeitySpecificAlignmentPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificDomainPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDomainId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredDomainId");

                    b.HasDiscriminator().HasValue("HaveAnyDeitySpecificDomainPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificFontPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDivineFontId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredDivineFontId");

                    b.HasDiscriminator().HasValue("HaveAnyDeitySpecificFontPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificWeaponCategoryPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredWeaponCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredWeaponCategoryId");

                    b.HasDiscriminator().HasValue("HaveAnyDeitySpecificWeaponCategoryPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDevotionSpellPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyDevotionSpellPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyFamiliarPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyFamiliarPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyKiSpellsPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyKiSpellsPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyLoreProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnyLoreProficiencyPrerequisite_RequiredProficiencyId");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnyLoreProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyMagicSchoolPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyMagicSchoolPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyMagicTraditionPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyMagicTraditionPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyMeleeWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnyMeleeWeaponSpecificProficiencyPrerequisite_RequiredProf~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnyMeleeWeaponSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyRangedWeaponPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveAnyRangedWeaponPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyRangedWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnyRangedWeaponSpecificProficiencyPrerequisite_RequiredPro~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnyRangedWeaponSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySavingThrowSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnySavingThrowSpecificProficiencyPrerequisite_RequiredProf~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnySavingThrowSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySensePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredSenseAccuracyId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredSenseAccuracyId");

                    b.HasDiscriminator().HasValue("HaveAnySensePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySkillProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnySkillProficiencyPrerequisite_RequiredProficiencyId");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnySkillProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySkillSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnySkillSpecificProficiencyPrerequisite_RequiredProficienc~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnySkillSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySpellSpecificTraitPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredTraitId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredTraitId");

                    b.HasDiscriminator().HasValue("HaveAnySpellSpecificTraitPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyWeaponCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnyWeaponCategorySpecificProficiencyPrerequisite_RequiredP~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnyWeaponCategorySpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyWeaponGroupSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveAnyWeaponGroupSpecificProficiencyPrerequisite_RequiredProf~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveAnyWeaponGroupSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveCurrentArmorCategoryPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("ArmorCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("ArmorCategoryId");

                    b.HasDiscriminator().HasValue("HaveCurrentArmorCategoryPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveCurrentWeaponProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveCurrentWeaponProficiencyPrerequisite_RequiredProficiencyId");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveCurrentWeaponProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveFavoredWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveFavoredWeaponSpecificProficiencyPrerequisite_RequiredProfi~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveFavoredWeaponSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveFocusPoolPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveFocusPoolPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveNoMagicSchoolPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.HasDiscriminator().HasValue("HaveNoMagicSchoolPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificAgePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificAgePrerequisite_Comparator");

                    b.Property<int>("Years")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("HaveSpecificAgePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificAlignmentPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredAlignmentId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificAlignmentPrerequisite_RequiredAlignmentId");

                    b.HasIndex("RequiredAlignmentId");

                    b.HasDiscriminator().HasValue("HaveSpecificAlignmentPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificAncestryAmountPreqrequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificAncestryAmountPreqrequisite_Comparator");

                    b.HasDiscriminator().HasValue("HaveSpecificAncestryAmountPreqrequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificAncestryPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredAncestryId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredAncestryId");

                    b.HasDiscriminator().HasValue("HaveSpecificAncestryPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificAnimalCompanionAmountPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificAnimalCompanionAmountPrerequisite_Amount");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificAnimalCompanionAmountPrerequisite_Comparator");

                    b.HasDiscriminator().HasValue("HaveSpecificAnimalCompanionAmountPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificArmorCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("ArmorCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificArmorCategorySpecificProficiencyPrerequisite_Armor~");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificArmorCategorySpecificProficiencyPrerequisite_Requi~");

                    b.HasIndex("ArmorCategoryId");

                    b.HasIndex("RequiredProficiencyId")
                        .HasDatabaseName("IX_BasePrerequisite_HaveSpecificArmorCategorySpecificProficie~1");

                    b.HasDiscriminator().HasValue("HaveSpecificArmorCategorySpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificBloodlinePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredBloodlineId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredBloodlineId");

                    b.HasDiscriminator().HasValue("HaveSpecificBloodlinePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificBloodlineTraditionPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredBloodlineMagicTraditionId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredBloodlineMagicTraditionId");

                    b.HasDiscriminator().HasValue("HaveSpecificBloodlineTraditionPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificCausePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredCauseId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredCauseId");

                    b.HasDiscriminator().HasValue("HaveSpecificCausePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificClassFeaturePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredClassFeatureId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredClassFeatureId");

                    b.HasDiscriminator().HasValue("HaveSpecificClassFeaturePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificClassPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredClassId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredClassId");

                    b.HasDiscriminator().HasValue("HaveSpecificClassPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDecipherWritingProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificDecipherWritingProficiencyPrerequisite_RequiredPro~");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveSpecificDecipherWritingProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDeityPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDeityId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredDeityId");

                    b.HasDiscriminator().HasValue("HaveSpecificDeityPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDeityWeaponCategoryPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("WeaponCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("WeaponCategoryId");

                    b.HasDiscriminator().HasValue("HaveSpecificDeityWeaponCategoryPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDivineAllyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDivineAllyId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredDivineAllyId");

                    b.HasDiscriminator().HasValue("HaveSpecificDivineAllyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDivineFontPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDivineFontId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificDivineFontPrerequisite_RequiredDivineFontId");

                    b.HasIndex("RequiredDivineFontId");

                    b.HasDiscriminator().HasValue("HaveSpecificDivineFontPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDraconicExemplarPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDraconicExemplarId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredDraconicExemplarId");

                    b.HasDiscriminator().HasValue("HaveSpecificDraconicExemplarPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDruidicOrderPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDruidicOrderId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredDruidicOrderId");

                    b.HasDiscriminator().HasValue("HaveSpecificDruidicOrderPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificFeatPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredFeatId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredFeatId");

                    b.HasDiscriminator().HasValue("HaveSpecificFeatPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificGunslingersWayPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredGunsinglersWayId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredGunsinglersWayId");

                    b.HasDiscriminator().HasValue("HaveSpecificGunslingersWayPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificHeritagePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredHeritageId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredHeritageId");

                    b.HasDiscriminator().HasValue("HaveSpecificHeritagePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificHybridStudyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredHybridStudyId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredHybridStudyId");

                    b.HasDiscriminator().HasValue("HaveSpecificHybridStudyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificInnovationPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("InnovationId")
                        .HasColumnType("uuid");

                    b.HasIndex("InnovationId");

                    b.HasDiscriminator().HasValue("HaveSpecificInnovationPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificInstinctPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredInstinctId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredInstinctId");

                    b.HasDiscriminator().HasValue("HaveSpecificInstinctPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificLanguageAmountPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificLanguageAmountPrerequisite_Amount");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificLanguageAmountPrerequisite_Comparator");

                    b.HasDiscriminator().HasValue("HaveSpecificLanguageAmountPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificLanguagePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.HasIndex("LanguageId");

                    b.HasDiscriminator().HasValue("HaveSpecificLanguagePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificLevelPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificLevelPrerequisite_Comparator");

                    b.Property<int>("RequiredLevel")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("HaveSpecificLevelPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificLoreSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredLoreId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificLoreSpecificProficiencyPrerequisite_RequiredProfic~");

                    b.HasIndex("RequiredLoreId");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveSpecificLoreSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMagicSchoolPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredMagicSchoolId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredMagicSchoolId");

                    b.HasDiscriminator().HasValue("HaveSpecificMagicSchoolPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMagicTraditionPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredMagicTraditionId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificMagicTraditionPrerequisite_RequiredMagicTraditionId");

                    b.HasIndex("RequiredMagicTraditionId");

                    b.HasDiscriminator().HasValue("HaveSpecificMagicTraditionPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMeleeWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredMeleeWeaponId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificMeleeWeaponSpecificProficiencyPrerequisite_Require~");

                    b.HasIndex("RequiredMeleeWeaponId");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveSpecificMeleeWeaponSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMethodologyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredMethodologyId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredMethodologyId");

                    b.HasDiscriminator().HasValue("HaveSpecificMethodologyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMovementMethodPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("RequiredMovementMethod")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("HaveSpecificMovementMethodPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMusePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredMuseId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredMuseId");

                    b.HasDiscriminator().HasValue("HaveSpecificMusePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificRacketPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredRacketId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredRacketId");

                    b.HasDiscriminator().HasValue("HaveSpecificRacketPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificRangedWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificRangedWeaponSpecificProficiencyPrerequisite_Requir~");

                    b.Property<Guid>("RequiredRangedWeaponId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasIndex("RequiredRangedWeaponId");

                    b.HasDiscriminator().HasValue("HaveSpecificRangedWeaponSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificRecallKnowledgeProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificRecallKnowledgeProficiencyPrerequisite_RequiredPro~");

                    b.Property<bool>("RequiresAssurance")
                        .HasColumnType("boolean");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveSpecificRecallKnowledgeProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSavingThrowSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificSavingThrowSpecificProficiencyPrerequisite_Require~");

                    b.Property<Guid>("RequiredSavingThrowStatId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasIndex("RequiredSavingThrowStatId");

                    b.HasDiscriminator().HasValue("HaveSpecificSavingThrowSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSensePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredSenseId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredSenseId");

                    b.HasDiscriminator().HasValue("HaveSpecificSensePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSizePrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredSizeId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredSizeId");

                    b.HasDiscriminator().HasValue("HaveSpecificSizePrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSkillProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificSkillProficiencyPrerequisite_RequiredProficiencyId");

                    b.Property<Guid>("RequiredSkillId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasIndex("RequiredSkillId");

                    b.HasDiscriminator().HasValue("HaveSpecificSkillProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSpellAttackProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid?>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificSpellAttackProficiencyPrerequisite_RequiredProfici~");

                    b.Property<Guid>("RequiredProfiencyId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveSpecificSpellAttackProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSpellDcProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid?>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificSpellDcProficiencyPrerequisite_RequiredProficiency~");

                    b.Property<Guid>("RequiredProfiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificSpellDcProficiencyPrerequisite_RequiredProfiencyId");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasDiscriminator().HasValue("HaveSpecificSpellDcProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSpellPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredSpellId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredSpellId");

                    b.HasDiscriminator().HasValue("HaveSpecificSpellPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSpellSlotLevelPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("SpellSlotLevel")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("HaveSpecificSpellSlotLevelPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificStanceAmountPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<int>("Amount")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificStanceAmountPrerequisite_Amount");

                    b.Property<int>("Comparator")
                        .HasColumnType("integer")
                        .HasColumnName("HaveSpecificStanceAmountPrerequisite_Comparator");

                    b.HasDiscriminator().HasValue("HaveSpecificStanceAmountPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificStatPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredStatId")
                        .HasColumnType("uuid");

                    b.Property<int>("RequiredStatValue")
                        .HasColumnType("integer");

                    b.HasIndex("RequiredStatId");

                    b.HasDiscriminator().HasValue("HaveSpecificStatPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificTenetPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredTennetId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredTennetId");

                    b.HasDiscriminator().HasValue("HaveSpecificTenetPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificTraitPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredTraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificTraitPrerequisite_RequiredTraitId");

                    b.HasIndex("RequiredTraitId");

                    b.HasDiscriminator().HasValue("HaveSpecificTraitPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificUnarmedAttackPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredUnarmedWeaponId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredUnarmedWeaponId");

                    b.HasDiscriminator().HasValue("HaveSpecificUnarmedAttackPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificWeaponCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificWeaponCategorySpecificProficiencyPrerequisite_Requ~");

                    b.Property<Guid>("RequiredWeaponCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificWeaponCategorySpecificProficiencyPrerequisite_Req~1");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasIndex("RequiredWeaponCategoryId")
                        .HasDatabaseName("IX_BasePrerequisite_HaveSpecificWeaponCategorySpecificProfici~1");

                    b.HasDiscriminator().HasValue("HaveSpecificWeaponCategorySpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificWeaponGroupSpecificProficiencyPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredProficiencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("HaveSpecificWeaponGroupSpecificProficiencyPrerequisite_Require~");

                    b.Property<Guid>("RequiredWeaponGroupId")
                        .HasColumnType("uuid");

                    b.HasIndex("RequiredProficiencyId");

                    b.HasIndex("RequiredWeaponGroupId");

                    b.HasDiscriminator().HasValue("HaveSpecificWeaponGroupSpecificProficiencyPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.ManualPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ManualPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.WorshipSpecificDeityPrerequisite", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite");

                    b.Property<Guid>("RequiredDeityId")
                        .HasColumnType("uuid")
                        .HasColumnName("WorshipSpecificDeityPrerequisite_RequiredDeityId");

                    b.HasIndex("RequiredDeityId");

                    b.HasDiscriminator().HasValue("WorshipSpecificDeityPrerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.ArmorPropertyRune", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Rune");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("ArmorPropertyRune_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("ArmorPropertyRune");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.FundamentalArmorRune", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Rune");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("FundamentalArmorRune_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("FundamentalArmorRune");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.FundamentalWeaponRune", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Rune");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("FundamentalWeaponRune_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("FundamentalWeaponRune");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.WeaponPropertyRune", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Rune");

                    b.Property<Guid?>("TraitId")
                        .HasColumnType("uuid")
                        .HasColumnName("WeaponPropertyRune_TraitId");

                    b.HasIndex("TraitId");

                    b.HasDiscriminator().HasValue("WeaponPropertyRune");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.ArmorPropertyRuneVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RuneVariant");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("ArmorPropertyRuneVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("ArmorPropertyRuneVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.FundamentalArmorRuneVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RuneVariant");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("FundamentalArmorRuneVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("FundamentalArmorRuneVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.FundamentalWeaponRuneVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RuneVariant");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("FundamentalWeaponRuneVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("FundamentalWeaponRuneVariant");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.WeaponPropertyRuneVariant", b =>
                {
                    b.HasBaseType("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RuneVariant");

                    b.Property<NpgsqlTsVector>("SearchVector")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("tsvector")
                        .HasColumnName("WeaponPropertyRuneVariant_SearchVector")
                        .HasAnnotation("Npgsql:TsVectorConfig", "english")
                        .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Name", "Usage" });

                    b.HasIndex("SearchVector")
                        .HasMethod("GIN");

                    b.HasDiscriminator().HasValue("WeaponPropertyRuneVariant");
                });

            modelBuilder.Entity("AbilityTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Ability", null)
                        .WithMany()
                        .HasForeignKey("AbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActionTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Action", null)
                        .WithMany()
                        .HasForeignKey("ActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ActivityTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Activity", null)
                        .WithMany()
                        .HasForeignKey("ActivitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlignmentDeity", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("DeityFollowerAlignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", null)
                        .WithMany()
                        .HasForeignKey("FollowerAlignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AlignmentEidolon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", null)
                        .WithMany()
                        .HasForeignKey("EidolonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", null)
                        .WithMany()
                        .HasForeignKey("RequiredAlignmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AncestryAncestrySize", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Ancestry", null)
                        .WithMany()
                        .HasForeignKey("AncestriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.AncestrySize", null)
                        .WithMany()
                        .HasForeignKey("SizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AncestryHeritage", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Ancestry", null)
                        .WithMany()
                        .HasForeignKey("AncestriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Heritage", null)
                        .WithMany()
                        .HasForeignKey("HeritagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AncestrySizeEidolon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", null)
                        .WithMany()
                        .HasForeignKey("EidolonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.AncestrySize", null)
                        .WithMany()
                        .HasForeignKey("SizesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AncestryTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Ancestry", null)
                        .WithMany()
                        .HasForeignKey("AncestriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("AncestryTraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BackgroundTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Background", null)
                        .WithMany()
                        .HasForeignKey("BackgroundsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BloodlineSkill", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("BloodlineSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Bloodline", null)
                        .WithMany()
                        .HasForeignKey("BloodlinesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClassStat", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", null)
                        .WithMany()
                        .HasForeignKey("KeyAbilitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", null)
                        .WithMany()
                        .HasForeignKey("KeyAbilityClassesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureImmunity", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Immunity", null)
                        .WithMany()
                        .HasForeignKey("ImmunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureLanguage", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureSpell", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreatureEffectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", null)
                        .WithMany()
                        .HasForeignKey("SummonedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CreatureTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", null)
                        .WithMany()
                        .HasForeignKey("CreaturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CurseTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Curse", null)
                        .WithMany()
                        .HasForeignKey("CursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityDivineFont", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("DeitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineFont", null)
                        .WithMany()
                        .HasForeignKey("DivineFontsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityDomain", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("DeitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Domain", null)
                        .WithMany()
                        .HasForeignKey("DomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityMeleeWeapon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("FavoredById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeapon", null)
                        .WithMany()
                        .HasForeignKey("FavoredMeleeWeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityRangedWeapon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("FavoredById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RangedWeapon", null)
                        .WithMany()
                        .HasForeignKey("FavoredRangedWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeitySkill", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("DeitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("DivineSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityStat", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("DeitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", null)
                        .WithMany()
                        .HasForeignKey("DivineStatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeityUnarmedWeapon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", null)
                        .WithMany()
                        .HasForeignKey("DeitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.UnarmedWeapon", null)
                        .WithMany()
                        .HasForeignKey("FavoredUnarmedWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DiseaseTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Disease", null)
                        .WithMany()
                        .HasForeignKey("DiseasesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DomainMystery", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", null)
                        .WithMany()
                        .HasForeignKey("MysteriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Domain", null)
                        .WithMany()
                        .HasForeignKey("RelatedDomainsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EidolonSense", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", null)
                        .WithMany()
                        .HasForeignKey("EidolonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Sense", null)
                        .WithMany()
                        .HasForeignKey("SensesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EidolonSkill", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", null)
                        .WithMany()
                        .HasForeignKey("EidolonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EidolonTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", null)
                        .WithMany()
                        .HasForeignKey("EidolonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FeatTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", null)
                        .WithMany()
                        .HasForeignKey("FeatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GunslingersWaySkill", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.GunslingersWay", null)
                        .WithMany()
                        .HasForeignKey("GunslingersWaysId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("WaySkillIdOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HazardImmunity", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", null)
                        .WithMany()
                        .HasForeignKey("HazardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Immunity", null)
                        .WithMany()
                        .HasForeignKey("ImmunitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HazardTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", null)
                        .WithMany()
                        .HasForeignKey("HazardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ItemCurseTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ItemCurse", null)
                        .WithMany()
                        .HasForeignKey("ItemCursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MagicTraditionSpell", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", null)
                        .WithMany()
                        .HasForeignKey("TraditionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PatronThemeSpell", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", null)
                        .WithMany()
                        .HasForeignKey("GrantedSpellOptionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PatronTheme", null)
                        .WithMany()
                        .HasForeignKey("PatronThemesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlaneTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Plane", null)
                        .WithMany()
                        .HasForeignKey("PlanesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayModeSkillAction", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PlayMode", null)
                        .WithMany()
                        .HasForeignKey("RequiredPlayModesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", null)
                        .WithMany()
                        .HasForeignKey("SkillActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreciousMaterialArmorTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmor", null)
                        .WithMany()
                        .HasForeignKey("PreciousMaterialArmorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreciousMaterialShieldTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShield", null)
                        .WithMany()
                        .HasForeignKey("PreciousMaterialShieldsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreciousMaterialTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", null)
                        .WithMany()
                        .HasForeignKey("PreciousMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PreciousMaterialWeaponTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeapon", null)
                        .WithMany()
                        .HasForeignKey("PreciousMaterialWeaponsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.EffectIncrement", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect", "Effect")
                        .WithMany("Increments")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Triggers.EffectIncrementTrigger", "Trigger")
                        .WithMany()
                        .HasForeignKey("TriggerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Trigger");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId");

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffectBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "BooleanEffect")
                        .WithMany("Entries")
                        .HasForeignKey("BooleanEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BooleanEffect");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.ChoiceEffectBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.ChoiceEffect", "Choiceffect")
                        .WithMany("Entries")
                        .HasForeignKey("ChoiceEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choiceffect");

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Ability", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", "RollableEffect")
                        .WithMany()
                        .HasForeignKey("RollableEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Effects", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Abilities_Effects");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ActionType");

                    b.Navigation("Effects");

                    b.Navigation("RollableEffect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Action", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", "ActionType")
                        .WithMany("Actions")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", "RollableEffect")
                        .WithMany()
                        .HasForeignKey("RollableEffectId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Actions_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ActionType");

                    b.Navigation("Details");

                    b.Navigation("RollableEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Activity", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Activities_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Philosophy", null)
                        .WithMany("FollowAlignments")
                        .HasForeignKey("PhilosophyId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Ancestry", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany("Ancestries")
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "AdditionalMechanics", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_AdditionalMechanics");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Adventurers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_Adventurers");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "AlignmentAndReligion", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_AlignmentAndReligion");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Description", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_Description");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Names", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_Names");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "OtherInformation", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_OtherInformation");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "OthersProbably", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_OthersProbably");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "PhysicalDescription", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_PhysicalDescription");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Society", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_Society");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "YouMight", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Ancestries_YouMight");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("AdditionalMechanics");

                    b.Navigation("Adventurers");

                    b.Navigation("AlignmentAndReligion");

                    b.Navigation("Description");

                    b.Navigation("Effect");

                    b.Navigation("Names");

                    b.Navigation("OtherInformation");

                    b.Navigation("OthersProbably");

                    b.Navigation("PhysicalDescription");

                    b.Navigation("Rarity");

                    b.Navigation("Society");

                    b.Navigation("SourcePage");

                    b.Navigation("YouMight");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ArcaneThesis", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("ArcaneThesis_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Archetype", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "DedicationFeat")
                        .WithMany()
                        .HasForeignKey("DedicationFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Archetypes_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "MulticlassDetails", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Archetypes_MulticlassDetails");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("DedicationFeat");

                    b.Navigation("Details");

                    b.Navigation("MulticlassDetails");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorGroup", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Background", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Backgrounds_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("Prerequisite");

                    b.Navigation("Rarity");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Bloodline", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "AdvancedBloodlineSpell")
                        .WithMany()
                        .HasForeignKey("AdvancedBloodlineSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "GreaterBloodlineSpell")
                        .WithMany()
                        .HasForeignKey("GreaterBloodlineSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "InitialBloodlineSpell")
                        .WithMany()
                        .HasForeignKey("InitialBloodlineSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "SpellListTradition")
                        .WithMany()
                        .HasForeignKey("SpellListTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Bloodlines_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "TypeChoiceDetails", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Bloodlines_TypeChoiceDetails");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("AdvancedBloodlineSpell");

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("GreaterBloodlineSpell");

                    b.Navigation("InitialBloodlineSpell");

                    b.Navigation("Rarity");

                    b.Navigation("SourcePage");

                    b.Navigation("SpellListTradition");

                    b.Navigation("TypeChoiceDetails");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Cause", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "Alignment")
                        .WithMany("Causes")
                        .HasForeignKey("AlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Silvester.Pathfinder.Reference.Database.Utilities.Text.MarkdownText", "DivineSmite", b1 =>
                        {
                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<string>("Markdown")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Plain")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("OwnerId");

                            b1.ToTable("Causes");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Causes_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Alignment");

                    b.Navigation("Class");

                    b.Navigation("Details");

                    b.Navigation("DivineSmite")
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "AdvancedWeaponProficiency")
                        .WithMany()
                        .HasForeignKey("AdvancedWeaponProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "ClassDcProficiency")
                        .WithMany()
                        .HasForeignKey("ClassDcProficiencyId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "FortitudeProficiency")
                        .WithMany()
                        .HasForeignKey("FortitudeProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "HeavyArmorProficiency")
                        .WithMany()
                        .HasForeignKey("HeavyArmorProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "LightArmorProficiency")
                        .WithMany()
                        .HasForeignKey("LightArmorProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "MartialWeaponProficiency")
                        .WithMany()
                        .HasForeignKey("MartialWeaponProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "MediumArmorProficiency")
                        .WithMany()
                        .HasForeignKey("MediumArmorProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "PerceptionProficiency")
                        .WithMany()
                        .HasForeignKey("PerceptionProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "PredefinedMagicTradition")
                        .WithMany()
                        .HasForeignKey("PredefinedMagicTraditionId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "ReflexProficiency")
                        .WithMany()
                        .HasForeignKey("ReflexProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "SimpleWeaponProficiency")
                        .WithMany()
                        .HasForeignKey("SimpleWeaponProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "SpellAttackProficiency")
                        .WithMany()
                        .HasForeignKey("SpellAttackProficiencyId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "SpellDcProficiency")
                        .WithMany()
                        .HasForeignKey("SpellDcProficiencyId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "UnarmedWeaponProficiency")
                        .WithMany()
                        .HasForeignKey("UnarmedWeaponProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "UnarmoredProficiency")
                        .WithMany()
                        .HasForeignKey("UnarmoredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "WillProficiency")
                        .WithMany()
                        .HasForeignKey("WillProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvancedWeaponProficiency");

                    b.Navigation("ClassDcProficiency");

                    b.Navigation("FortitudeProficiency");

                    b.Navigation("HeavyArmorProficiency");

                    b.Navigation("LightArmorProficiency");

                    b.Navigation("MartialWeaponProficiency");

                    b.Navigation("MediumArmorProficiency");

                    b.Navigation("PerceptionProficiency");

                    b.Navigation("PredefinedMagicTradition");

                    b.Navigation("ReflexProficiency");

                    b.Navigation("SimpleWeaponProficiency");

                    b.Navigation("SpellAttackProficiency");

                    b.Navigation("SpellDcProficiency");

                    b.Navigation("UnarmedWeaponProficiency");

                    b.Navigation("UnarmoredProficiency");

                    b.Navigation("WillProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassCharacteristic", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "Class")
                        .WithMany("Characteristics")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassFeature", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("ClassFeatures_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassFeatureBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassFeature", "ClassFeature")
                        .WithMany()
                        .HasForeignKey("ClassFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "Class")
                        .WithMany("Features")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("ClassFeature");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassMannerism", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "Class")
                        .WithMany("Mannerisms")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ConditionCategory", "ConditionCategory")
                        .WithMany("Conditions")
                        .HasForeignKey("ConditionCategoryId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", "OverridesCondition")
                        .WithMany()
                        .HasForeignKey("OverridesConditionId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Conditions_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ConditionCategory");

                    b.Navigation("Details");

                    b.Navigation("OverridesCondition");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "Alignment")
                        .WithMany()
                        .HasForeignKey("AlignmentId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Ancestry", "Ancestry")
                        .WithMany()
                        .HasForeignKey("AncestryId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureRecallKnowledge", "RecallKnowledge")
                        .WithOne("Creature")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", "RecallKnowledgeId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.AncestrySize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Creature_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Alignment");

                    b.Navigation("Ancestry");

                    b.Navigation("Details");

                    b.Navigation("Rarity");

                    b.Navigation("RecallKnowledge");

                    b.Navigation("Size");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureFlavor", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", "Creature")
                        .WithMany()
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("CreatureFlavor_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Creature");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureRecallKnowledge", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureSense", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", "Creature")
                        .WithMany("Abilities")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Sense", "Sense")
                        .WithMany()
                        .HasForeignKey("SenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Sense");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureSkill", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", "Creature")
                        .WithMany("Skills")
                        .HasForeignKey("CreatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creature");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Curse", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Curses_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SavingThrowStat");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "Alignment")
                        .WithMany("Deities")
                        .HasForeignKey("AlignmentId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DeityCategory", "Category")
                        .WithMany("Deities")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "DevoteeEffect")
                        .WithMany()
                        .HasForeignKey("DevoteeEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineIntercession", "DivineIntercession")
                        .WithMany()
                        .HasForeignKey("DivineIntercessionId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Deities_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Alignment");

                    b.Navigation("Category");

                    b.Navigation("Details");

                    b.Navigation("DevoteeEffect");

                    b.Navigation("DivineIntercession");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Disease", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId");

                    b.Navigation("SavingThrowStat");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStage", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Disease", "Disease")
                        .WithMany("Stages")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStage", "DiseaseStage")
                        .WithMany("Effects")
                        .HasForeignKey("DiseaseStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DiseaseStage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineAlly", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineIntercession", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Doctrine", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DraconicExemplar", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.EffectShape", "EffectShape")
                        .WithMany("DraconicExemplars")
                        .HasForeignKey("EffectShapeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("EffectShape");

                    b.Navigation("SavingThrowStat");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DruidicOrder", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "MagicTradition")
                        .WithMany()
                        .HasForeignKey("MagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Language");

                    b.Navigation("MagicTradition");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EidolonAbility", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", "Eidolon")
                        .WithMany("Abilities")
                        .HasForeignKey("EidolonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("EidolonAbility_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("Eidolon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EidolonHomePlane", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", "Eidolon")
                        .WithMany("HomePlanes")
                        .HasForeignKey("EidolonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Plane", "Plane")
                        .WithMany()
                        .HasForeignKey("PlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId");

                    b.Navigation("Eidolon");

                    b.Navigation("Plane");

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EidolonVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", "Eidolon")
                        .WithMany("Variants")
                        .HasForeignKey("EidolonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Eidolon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.FamiliarAbility", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", "ActionType")
                        .WithMany("Feats")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Archetype", null)
                        .WithMany("Feats")
                        .HasForeignKey("ArchetypeId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", "RollableEffect")
                        .WithMany()
                        .HasForeignKey("RollableEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Feats_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ActionType");

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("Prerequisite");

                    b.Navigation("RollableEffect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.FeatRequirement", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "Feat")
                        .WithMany()
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.GunslingersWay", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "AdvancedDeed")
                        .WithMany()
                        .HasForeignKey("AdvancedDeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "GreaterDeed")
                        .WithMany()
                        .HasForeignKey("GreaterDeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "InitialDeed")
                        .WithMany()
                        .HasForeignKey("InitialDeedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "SlingersReload")
                        .WithMany()
                        .HasForeignKey("SlingersReloadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("GunslingersWays_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("AdvancedDeed");

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("GreaterDeed");

                    b.Navigation("InitialDeed");

                    b.Navigation("Prerequisite");

                    b.Navigation("SlingersReload");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HarrowCard", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "Alignment")
                        .WithMany()
                        .HasForeignKey("AlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.HarrowCategory", "HarrowCategory")
                        .WithMany()
                        .HasForeignKey("HarrowCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alignment");

                    b.Navigation("HarrowCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HarrowCategory", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "AffectedStat")
                        .WithMany()
                        .HasForeignKey("AffectedStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AffectedStat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardComplexity", "Complexity")
                        .WithMany("Hazards")
                        .HasForeignKey("ComplexityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardType", "Type")
                        .WithMany("Hazards")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "RoutineDetails", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Hazards_RoutineDetails");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Complexity");

                    b.Navigation("RoutineDetails");

                    b.Navigation("SourcePage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardComponent", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", "Hazard")
                        .WithMany("HazardComponents")
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardDetectionRequirement", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", "Hazard")
                        .WithMany()
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hazard");

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardDisableRequirement", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", "Hazard")
                        .WithMany("DisableRequirements")
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hazard");

                    b.Navigation("RequiredProficiency");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardDispellRequirement", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", "Hazard")
                        .WithMany("DispellRequirements")
                        .HasForeignKey("HazardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hazard");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardType", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Heritage", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Heritages_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("Rarity");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HuntersEdge", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HybridStudy", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "ConfluxSpell")
                        .WithMany()
                        .HasForeignKey("ConfluxSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "EleventhSpell")
                        .WithMany()
                        .HasForeignKey("EleventhSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "SeventhSpell")
                        .WithMany()
                        .HasForeignKey("SeventhSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "ThirteenthSpell")
                        .WithMany()
                        .HasForeignKey("ThirteenthSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("HybridStudies_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ConfluxSpell");

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("EleventhSpell");

                    b.Navigation("SeventhSpell");

                    b.Navigation("SourcePage");

                    b.Navigation("ThirteenthSpell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAction", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem", null)
                        .WithMany("InlineActions")
                        .HasForeignKey("BaseItemId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant", null)
                        .WithMany("InlineActions")
                        .HasForeignKey("BaseItemVariantId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", null)
                        .WithMany("Actions")
                        .HasForeignKey("HazardId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", "RollableEffect")
                        .WithMany()
                        .HasForeignKey("RollableEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", null)
                        .WithMany("InlineActions")
                        .HasForeignKey("SpellId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", "StaggeredEffect")
                        .WithOne()
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAction", "StaggeredEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGear", null)
                        .WithMany("InlineActions")
                        .HasForeignKey("UtilityGearId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Effect", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("InlineAction_Effect");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ActionType");

                    b.Navigation("Effect");

                    b.Navigation("RollableEffect");

                    b.Navigation("StaggeredEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineActionTraitBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAction", "Owner")
                        .WithMany("Traits")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAttack", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.AttackType", "AttackType")
                        .WithMany()
                        .HasForeignKey("AttackTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", null)
                        .WithMany("Attacks")
                        .HasForeignKey("HazardId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", "StaggeredEffect")
                        .WithMany()
                        .HasForeignKey("StaggeredEffectId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Effect", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("InlineAttack_Effect");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ActionType");

                    b.Navigation("AttackType");

                    b.Navigation("DamageType");

                    b.Navigation("Effect");

                    b.Navigation("StaggeredEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAttackTraitBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAttack", "Owner")
                        .WithMany("Traits")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Innovation", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Innovations_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InnovationModification", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Innovation", "Innovation")
                        .WithMany("Modifications")
                        .HasForeignKey("InnovationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.InnovationModificationType", "Type")
                        .WithMany("Modifications")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("Innovation");

                    b.Navigation("Prerequisite");

                    b.Navigation("SourcePage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Instinct", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", null)
                        .WithMany("Instincts")
                        .HasForeignKey("ClassId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "InstinctAbilityEffect")
                        .WithMany()
                        .HasForeignKey("InstinctAbilityEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "RagingEffect")
                        .WithMany()
                        .HasForeignKey("RagingEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.Navigation("InstinctAbilityEffect");

                    b.Navigation("RagingEffect");

                    b.Navigation("SourcePage");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InstinctAbility", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePager")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.Navigation("SourcePager");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ItemCurse", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("ItemCurses_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Language", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.LanguageType", "Type")
                        .WithMany("Languages")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Lore", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "StatModifier")
                        .WithMany()
                        .HasForeignKey("StatModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatModifier");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.LoreCategory", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "StatModifier")
                        .WithMany()
                        .HasForeignKey("StatModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatModifier");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MasterAbility", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Methodology", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Methodologies_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Muse", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "AdvancedRevelation")
                        .WithOne("AdvancedRevelationOf")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", "AdvancedRevelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "GrantedCantrip")
                        .WithOne("GrantedBy")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", "GrantedCantripId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "GreaterRevelation")
                        .WithOne("GreaterRevelationOf")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", "GreaterRevelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "InitialRevelation")
                        .WithOne("InitialRevelationOf")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", "InitialRevelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MysteryCurse", "MysteryCurse")
                        .WithOne("Mystery")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.Mystery", "MysteryCurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "TrainedSkill")
                        .WithMany()
                        .HasForeignKey("TrainedSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Mysteries_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "MysteryBenefits", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Mysteries_MysteryBenefits");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("AdvancedRevelation");

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("GrantedCantrip");

                    b.Navigation("GreaterRevelation");

                    b.Navigation("InitialRevelation");

                    b.Navigation("MysteryBenefits");

                    b.Navigation("MysteryCurse");

                    b.Navigation("SourcePage");

                    b.Navigation("TrainedSkill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MysteryCurse", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("MysteryCurse_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MysteryCursePotency", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MysteryCurse", "MysteryCurse")
                        .WithMany("Potencies")
                        .HasForeignKey("MysteryCurseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", "Potency")
                        .WithMany()
                        .HasForeignKey("PotencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("MysteryCursePotency_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("MysteryCurse");

                    b.Navigation("Potency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PatronTheme", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "MagicTradition")
                        .WithMany()
                        .HasForeignKey("MagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "PatronSkill")
                        .WithMany()
                        .HasForeignKey("PatronSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("MagicTradition");

                    b.Navigation("PatronSkill");

                    b.Navigation("Rarity");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Philosophy", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Philosophies_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Plane", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "Alignment")
                        .WithMany("Planes")
                        .HasForeignKey("AlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PlaneCategory", "Category")
                        .WithMany("Planes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Planes_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Alignment");

                    b.Navigation("Category");

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmor", "Armor")
                        .WithOne("Material")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", "ArmorId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShield", "Shield")
                        .WithOne("Material")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", "ShieldId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeapon", "Weapon")
                        .WithOne("Material")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", "WeaponId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("PreciousMaterials_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Armor");

                    b.Navigation("Details");

                    b.Navigation("Shield");

                    b.Navigation("SourcePage");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmor", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("PreciousMaterialArmors_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmorVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmor", "Armor")
                        .WithMany("Variants")
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ObjectGrade", "Grade")
                        .WithMany("ArmorVariants")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armor");

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialObjectInformation", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialObjectCategory", "Category")
                        .WithMany("ObjectInformations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ObjectGrade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", "Material")
                        .WithMany("ObjectInformations")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Grade");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShield", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("PreciousMaterialShields_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShieldVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Bulk", "Bulk")
                        .WithMany()
                        .HasForeignKey("BulkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ObjectGrade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShield", "Shield")
                        .WithMany("Variants")
                        .HasForeignKey("ShieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bulk");

                    b.Navigation("Grade");

                    b.Navigation("Shield");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeapon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("PreciousMaterialWeapons_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeaponVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ObjectGrade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeapon", "Weapon")
                        .WithMany("Variants")
                        .HasForeignKey("WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Racket", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Rackets_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ResearchField", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("ResearchFields_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", null)
                        .WithMany("RollableEffects")
                        .HasForeignKey("SpellId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Rule", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Rules_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagic", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "AdvancedRuneSpell")
                        .WithMany()
                        .HasForeignKey("AdvancedRuneSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "InitialRuneSpell")
                        .WithMany()
                        .HasForeignKey("InitialRuneSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "MagicSchool")
                        .WithOne("RuneMagicSchool")
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagic", "MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AdvancedRuneSpell");

                    b.Navigation("Effect");

                    b.Navigation("InitialRuneSpell");

                    b.Navigation("MagicSchool");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagicSchoolBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "MagicSchool")
                        .WithMany("ProibitedByRuneMagic")
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagic", "RuneMagic")
                        .WithMany("ProhibitedSchools")
                        .HasForeignKey("RuneMagicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicSchool");

                    b.Navigation("RuneMagic");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", b =>
                {
                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("SavingThrowStats_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Sense", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Senses_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SenseAccuracy", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "StatModifier")
                        .WithMany("Skills")
                        .HasForeignKey("StatModifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatModifier");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequireProficiency")
                        .WithMany()
                        .HasForeignKey("RequireProficiencyId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", "RollableEffect")
                        .WithMany()
                        .HasForeignKey("RollableEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("SkillActions_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ActionType");

                    b.Navigation("Details");

                    b.Navigation("RequireProficiency");

                    b.Navigation("RollableEffect");

                    b.Navigation("SourcePage");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillActionExample", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany("Examples")
                        .HasForeignKey("SkillActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillBenefit", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.BenefitType", "BenefitType")
                        .WithMany()
                        .HasForeignKey("BenefitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BenefitType");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", "ActionType")
                        .WithMany("Spells")
                        .HasForeignKey("ActionTypeId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Domain", "Domain")
                        .WithMany()
                        .HasForeignKey("DomainId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "MagicSchool")
                        .WithMany("Spells")
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellType", "SpellType")
                        .WithMany("Spells")
                        .HasForeignKey("SpellTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", "StaggeredEffect")
                        .WithMany()
                        .HasForeignKey("StaggeredEffectId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("Spells")
                        .HasForeignKey("TraitId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Spells_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("ActionType");

                    b.Navigation("Class");

                    b.Navigation("Details");

                    b.Navigation("Domain");

                    b.Navigation("MagicSchool");

                    b.Navigation("SavingThrowStat");

                    b.Navigation("SourcePage");

                    b.Navigation("SpellType");

                    b.Navigation("StaggeredEffect");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellHeightening", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "Spell")
                        .WithMany("Heightenings")
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("SpellHeightening_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellTraitBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "Owner")
                        .WithMany("Traits")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SavingThrowStat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStage", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", "StaggeredEffect")
                        .WithMany("Stages")
                        .HasForeignKey("StaggeredEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaggeredEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStage", "StaggeredEffectStage")
                        .WithMany("Effects")
                        .HasForeignKey("StaggeredEffectStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaggeredEffectStage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectTraitBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", "Owner")
                        .WithMany("Traits")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SwashbucklersStyle", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Tenet", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Tenets_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("Traits_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGear", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("UtilityGear_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGearTraitBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGear", "Owner")
                        .WithMany("TraitBindings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGearVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Bulk", "Bulk")
                        .WithMany()
                        .HasForeignKey("BulkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGear", "UtilityGear")
                        .WithMany("Variants")
                        .HasForeignKey("UtilityGearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Addendum", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("UtilityGearVariant_Addendum");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Addendum");

                    b.Navigation("Bulk");

                    b.Navigation("Rarity");

                    b.Navigation("UtilityGear");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SourcePage", "SourcePage")
                        .WithMany()
                        .HasForeignKey("SourcePageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Details", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("BaseItem_Details");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Details");

                    b.Navigation("SourcePage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemTraitBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem", "Owner")
                        .WithMany("TraitBindings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Bulk", "Bulk")
                        .WithMany()
                        .HasForeignKey("BulkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem", "Item")
                        .WithMany("Variants")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RollableEffect", "RollableEffect")
                        .WithMany()
                        .HasForeignKey("RollableEffectId");

                    b.OwnsMany("Silvester.Pathfinder.Reference.Database.Utilities.Text.TextBlock", "Addendum", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("Order")
                                .HasColumnType("integer");

                            b1.Property<Guid>("OwnerId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<NpgsqlTsVector>("SearchVector")
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("tsvector")
                                .HasAnnotation("Npgsql:TsVectorConfig", "english")
                                .HasAnnotation("Npgsql:TsVectorProperties", new[] { "Text" });

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("Type")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.HasIndex("OwnerId");

                            b1.HasIndex("SearchVector")
                                .HasMethod("GIN");

                            b1.ToTable("BaseItemVariant_Addendum");

                            b1.WithOwner()
                                .HasForeignKey("OwnerId");
                        });

                    b.Navigation("Addendum");

                    b.Navigation("Bulk");

                    b.Navigation("Item");

                    b.Navigation("Rarity");

                    b.Navigation("RollableEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponComponentTraitBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponComponent", "Owner")
                        .WithMany("TraitBindings")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.StaveSpell", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.StaveVariant", null)
                        .WithMany("Spells")
                        .HasForeignKey("StaveVariantId");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisiteBinding", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", "BooleanPrerequisite")
                        .WithMany("Entries")
                        .HasForeignKey("BooleanPrerequisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BasePrerequisite", "Prerequisite")
                        .WithMany()
                        .HasForeignKey("PrerequisiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BooleanPrerequisite");

                    b.Navigation("Prerequisite");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Cell", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Row", "Row")
                        .WithMany("Cells")
                        .HasForeignKey("RowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Row");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Column", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Row", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", "Table")
                        .WithMany("Rows")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SkillActionTrait", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", null)
                        .WithMany()
                        .HasForeignKey("SkillActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SkillSkillAction", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", null)
                        .WithMany()
                        .HasForeignKey("SkillActionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", null)
                        .WithMany()
                        .HasForeignKey("SkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpellSpellComponent", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellComponent", null)
                        .WithMany()
                        .HasForeignKey("ComponentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", null)
                        .WithMany()
                        .HasForeignKey("SpellsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Choices.Instances.SpecificStatAnySkillChoice", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Instances.AddWeaponCategoryIncrement", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Instances.IncreaseProficiencyToIncrement", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.EffectIncrements.Triggers.Instances.SkillProficiencyTrigger", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficieny")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficieny");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.DisableFeatPrerequisitesEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "Feat")
                        .WithMany()
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.EnableSkillActionEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany()
                        .HasForeignKey("SkillActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyClassFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyDailyClassFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyInnovationModificationEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.InnovationModificationType", "InnovationModificationType")
                        .WithMany()
                        .HasForeignKey("InnovationModificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InnovationModificationType");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyLoreProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySavingThrowProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySenseEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SenseAccuracy", "SenseAccuracy")
                        .WithMany()
                        .HasForeignKey("SenseAccuracyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SenseAccuracy");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySkillProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnySkillSkillFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyStatSkillFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "RequiredStat")
                        .WithMany()
                        .HasForeignKey("RequiredStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredStat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyTraitSpellEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "RequiredTrait")
                        .WithMany()
                        .HasForeignKey("RequiredTraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredTrait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainAnyWeaponGroupProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainChosenSkillProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainChosenWeaponGroupProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainDeityFavoredWeaponProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSingularExpertiseEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "HighestProficiency")
                        .WithMany()
                        .HasForeignKey("HighestProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HighestProficiency");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAbilityBoostEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAbilityEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Ability", "Ability")
                        .WithMany()
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ability");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAbilityFlawEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificActionCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificAlchemicalBombProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificArmorCategoryProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorCategory", "ArmorCategory")
                        .WithMany()
                        .HasForeignKey("ArmorCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorCategory");

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificArmorCategorySpecializationEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorCategory", "ArmorCategory")
                        .WithMany()
                        .HasForeignKey("ArmorCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificArmorEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Armor", "Armor")
                        .WithMany()
                        .HasForeignKey("ArmorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Armor");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificCauseEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Cause", "Cause")
                        .WithMany()
                        .HasForeignKey("CauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cause");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificClassDcProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificConditionAnySavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificDamageResistanceEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificDamageWeaknessEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificElixirFormulaEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalElixir", "AlchemicalElixir")
                        .WithMany()
                        .HasForeignKey("AlchemicalElixirId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", "Potency")
                        .WithMany()
                        .HasForeignKey("PotencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlchemicalElixir");

                    b.Navigation("Potency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "Feat")
                        .WithMany()
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificHeritageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Heritage", "Heritage")
                        .WithMany()
                        .HasForeignKey("HeritageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Heritage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificInnateSpellEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "MagicTradition")
                        .WithMany()
                        .HasForeignKey("MagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicTradition");

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificInstinctAbilityEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.InstinctAbility", "InstinctAbility")
                        .WithMany()
                        .HasForeignKey("InstinctAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InstinctAbility");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificInstinctEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Instinct", "Instinct")
                        .WithMany()
                        .HasForeignKey("InstinctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Instinct");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificKeyAbilityOptionEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificLanguageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificLoreCategoryProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.LoreCategory", "LoreCategory")
                        .WithMany()
                        .HasForeignKey("LoreCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LoreCategory");

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificLoreProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Lore", "Lore")
                        .WithMany()
                        .HasForeignKey("LoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lore");

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicSchoolAnySavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "MagicSchool")
                        .WithMany()
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicSchool");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicSchoolEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "MagicSchool")
                        .WithMany()
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicSchool");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicSchoolSpellEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "MagicSchool")
                        .WithMany()
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicSchool");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicTraditionAnyInnateSpellEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "MagicTradition")
                        .WithMany()
                        .HasForeignKey("MagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicTradition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMagicTraditionAnySpellEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "MagicTradition")
                        .WithMany()
                        .HasForeignKey("MagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicTradition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMeleeWeaponEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeapon", "MeleeWeapon")
                        .WithMany()
                        .HasForeignKey("MeleeWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeleeWeapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificMeleeWeaponProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeapon", "MeleeWeapon")
                        .WithMany()
                        .HasForeignKey("MeleeWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeleeWeapon");

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRangedWeaponProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RangedWeapon", "RangedWeapon")
                        .WithMany()
                        .HasForeignKey("RangedWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("RangedWeapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRarityAnyLanguageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRarityHeritageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", "Rarity")
                        .WithMany()
                        .HasForeignKey("RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rarity");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificRuneMagicEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagic", "RuneMagic")
                        .WithMany()
                        .HasForeignKey("RuneMagicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RuneMagic");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSavingThrowProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("SavingThrowStat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSenseEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SenseAccuracy", "SenseAccuracy")
                        .WithMany()
                        .HasForeignKey("SenseAccuracyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Sense", "Sense")
                        .WithMany()
                        .HasForeignKey("SenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sense");

                    b.Navigation("SenseAccuracy");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillActionCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany()
                        .HasForeignKey("SkillActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillActionSpecificSavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany()
                        .HasForeignKey("SkillActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SavingThrowStat");

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillDcCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillInitiativeCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificActionCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificActionDcCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificSkillActionCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany()
                        .HasForeignKey("SkillActionId")
                        .HasConstraintName("FK_BaseEffect_SkillActions_GainSpecificSkillSpecificSkillActi~1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSkillSpecificSkillActionDcCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany()
                        .HasForeignKey("SkillActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellAttackProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellCastingEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "MagicTradition")
                        .WithMany()
                        .HasForeignKey("MagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagicTradition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellDcProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "Spell")
                        .WithMany()
                        .HasForeignKey("SpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Spell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificSpellcastingAbilityEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificStatSkillFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificStatSkillProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitAnySavingThrowCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificTraitSpellEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificUnarmedAttackEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.UnarmedWeapon", "UnarmedWeapon")
                        .WithMany()
                        .HasForeignKey("UnarmedWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("UnarmedWeapon");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponCategoryProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponCategorySpecializationEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponGroupCircumstanceBonusEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponGroupProficiencyEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "Proficiency")
                        .WithMany()
                        .HasForeignKey("ProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proficiency");

                    b.Navigation("WeaponCategory");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpecificWeaponGroupSpecializationEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.GainSpellcastingAbilityEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "Stat")
                        .WithMany()
                        .HasForeignKey("StatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificActionCheckEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Action");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificConditionAnySavingThrowEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificSavingThrowEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "SavingThrowStat")
                        .WithMany()
                        .HasForeignKey("SavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SavingThrowStat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificSkillActionCheckEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany()
                        .HasForeignKey("SkillActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificSkillSpecificSkillActionCheckEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", "SkillAction")
                        .WithMany()
                        .HasForeignKey("SkillActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("SkillAction");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ImproveSpecificTraitAnySavingThrowEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.LoseSpecificTraitEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "Trait")
                        .WithMany()
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyAncestrySizeEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.AncestrySize", "Size")
                        .WithMany()
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Size");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyFeatEffectsEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "Feat")
                        .WithMany()
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", "ModificationEffect")
                        .WithMany()
                        .HasForeignKey("ModificationEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feat");

                    b.Navigation("ModificationEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifyFeatLevelPrerequisiteEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "Feat")
                        .WithMany()
                        .HasForeignKey("FeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Feat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifySpecificConditionEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifySpecificWeaponCategoryDamageDieAmountEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ModifySpecificWeaponCategoryDamageDieSizeEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ProhibitSpecificFeatEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "ProhibitedFeat")
                        .WithMany()
                        .HasForeignKey("ProhibitedFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProhibitedFeat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.ProhibitSpecificMagicSchoolEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "ProhibitedMagicSchool")
                        .WithMany()
                        .HasForeignKey("ProhibitedMagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProhibitedMagicSchool");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Effects.Instances.UnlockSpecificTraitAncestryFeatsEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "AncestryTrait")
                        .WithMany()
                        .HasForeignKey("AncestryTraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AncestryTrait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.ChoiceEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Choices.Choice", "Choice")
                        .WithMany()
                        .HasForeignKey("ChoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Choice");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ConditionDiseaseStageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageDiseaseStageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ConditionEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Condition", "Condition")
                        .WithMany()
                        .HasForeignKey("ConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Condition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageEffect", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalBomb", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("AlchemicalBombs")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalElixir", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("AlchemicalElixirs")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalPoison", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("AlchemicalPoisons")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalTool", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("AlchemicalTools")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Ammunition", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Armor", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorCategory", "ArmorCategory")
                        .WithMany("Armors")
                        .HasForeignKey("ArmorCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorGroup", "ArmorGroup")
                        .WithMany("Armors")
                        .HasForeignKey("ArmorGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("Armors")
                        .HasForeignKey("TraitId");

                    b.Navigation("ArmorCategory");

                    b.Navigation("ArmorGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Artifact", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", null)
                        .WithMany("Artifacts")
                        .HasForeignKey("AlignmentId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("Artifacts")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.BeastGun", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("BeastGuns")
                        .HasForeignKey("TraitId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeapon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("CombinationWeapons")
                        .HasForeignKey("TraitId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeapon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("MeleeWeapons")
                        .HasForeignKey("TraitId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany("MeleeWeapons")
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany("MeleeWeapons")
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RangedWeapon", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("RangedWeapons")
                        .HasForeignKey("TraitId");

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany("RangedWeapons")
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany("RangedWeapons")
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.Stave", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("Staves")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalBombVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", "Potency")
                        .WithMany("AlchemicalBombs")
                        .HasForeignKey("PotencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Potency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalElixirVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", "Potency")
                        .WithMany()
                        .HasForeignKey("PotencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Potency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalPoisonVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", "PoisonEffect")
                        .WithOne()
                        .HasForeignKey("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalPoisonVariant", "PoisonEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PoisonEffect");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.AlchemicalToolVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", null)
                        .WithMany("AlchemicalTools")
                        .HasForeignKey("PotencyId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.ArtifactVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "Alignment")
                        .WithMany()
                        .HasForeignKey("AlignmentId");

                    b.Navigation("Alignment");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.BeastGunVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", "Potency")
                        .WithMany()
                        .HasForeignKey("PotencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("Potency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponMeleeComponent", "MeleeComponent")
                        .WithMany()
                        .HasForeignKey("MeleeComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponRangedComponent", "RangedComponent")
                        .WithMany()
                        .HasForeignKey("RangedComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeleeComponent");

                    b.Navigation("RangedComponent");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeaponVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RangedWeaponVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RuneVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", "Potency")
                        .WithMany()
                        .HasForeignKey("PotencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Potency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.StaveVariant", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", "Potency")
                        .WithMany()
                        .HasForeignKey("PotencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Potency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponMeleeComponent", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponRangedComponent", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DamageType", "DamageType")
                        .WithMany()
                        .HasForeignKey("DamageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "WeaponGroup")
                        .WithMany()
                        .HasForeignKey("WeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageType");

                    b.Navigation("WeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.FollowSpecificPhilosophyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Philosophy", "RequiredPhilosophy")
                        .WithMany()
                        .HasForeignKey("RequiredPhilosophyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredPhilosophy");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyArmorCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyBloodlineSpecificMagicTraditionPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "RequiredMagicTradition")
                        .WithMany()
                        .HasForeignKey("RequiredMagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredMagicTradition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificAlignmentPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "RequiredAlignment")
                        .WithMany()
                        .HasForeignKey("RequiredAlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredAlignment");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificDomainPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Domain", "RequiredDomain")
                        .WithMany()
                        .HasForeignKey("RequiredDomainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDomain");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificFontPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineFont", "RequiredDivineFont")
                        .WithMany()
                        .HasForeignKey("RequiredDivineFontId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDivineFont");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyDeitySpecificWeaponCategoryPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "RequiredWeaponCategory")
                        .WithMany()
                        .HasForeignKey("RequiredWeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredWeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyLoreProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyMeleeWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyRangedWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySavingThrowSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySensePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SenseAccuracy", "RequiredSenseAccuracy")
                        .WithMany()
                        .HasForeignKey("RequiredSenseAccuracyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredSenseAccuracy");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySkillProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySkillSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnySpellSpecificTraitPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "RequiredTrait")
                        .WithMany()
                        .HasForeignKey("RequiredTraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredTrait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyWeaponCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveAnyWeaponGroupSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveCurrentArmorCategoryPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorCategory", "ArmorCategory")
                        .WithMany()
                        .HasForeignKey("ArmorCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveCurrentWeaponProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveFavoredWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificAlignmentPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", "RequiredAlignment")
                        .WithMany()
                        .HasForeignKey("RequiredAlignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredAlignment");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificAncestryPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Ancestry", "RequiredAncestry")
                        .WithMany()
                        .HasForeignKey("RequiredAncestryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredAncestry");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificArmorCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorCategory", "ArmorCategory")
                        .WithMany()
                        .HasForeignKey("ArmorCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ArmorCategory");

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificBloodlinePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Bloodline", "RequiredBloodline")
                        .WithMany()
                        .HasForeignKey("RequiredBloodlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredBloodline");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificBloodlineTraditionPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "RequiredBloodlineMagicTradition")
                        .WithMany()
                        .HasForeignKey("RequiredBloodlineMagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredBloodlineMagicTradition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificCausePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Cause", "RequiredCause")
                        .WithMany()
                        .HasForeignKey("RequiredCauseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredCause");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificClassFeaturePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.ClassFeature", "RequiredClassFeature")
                        .WithMany()
                        .HasForeignKey("RequiredClassFeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredClassFeature");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificClassPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", "RequiredClass")
                        .WithMany()
                        .HasForeignKey("RequiredClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredClass");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDecipherWritingProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDeityPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", "RequiredDeity")
                        .WithMany()
                        .HasForeignKey("RequiredDeityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDeity");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDeityWeaponCategoryPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "WeaponCategory")
                        .WithMany()
                        .HasForeignKey("WeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDivineAllyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineAlly", "RequiredDivineAlly")
                        .WithMany()
                        .HasForeignKey("RequiredDivineAllyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDivineAlly");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDivineFontPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DivineFont", "RequiredDivineFont")
                        .WithMany()
                        .HasForeignKey("RequiredDivineFontId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDivineFont");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDraconicExemplarPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DraconicExemplar", "RequiredDraconicExemplar")
                        .WithMany()
                        .HasForeignKey("RequiredDraconicExemplarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDraconicExemplar");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificDruidicOrderPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.DruidicOrder", "RequiredDruidicOrder")
                        .WithMany()
                        .HasForeignKey("RequiredDruidicOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDruidicOrder");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificFeatPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Feat", "RequiredFeat")
                        .WithMany()
                        .HasForeignKey("RequiredFeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredFeat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificGunslingersWayPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.GunslingersWay", "RequiredGunsinglersWay")
                        .WithMany()
                        .HasForeignKey("RequiredGunsinglersWayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredGunsinglersWay");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificHeritagePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Heritage", "RequiredHeritage")
                        .WithMany()
                        .HasForeignKey("RequiredHeritageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredHeritage");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificHybridStudyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.HybridStudy", "RequiredHybridStudy")
                        .WithMany()
                        .HasForeignKey("RequiredHybridStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredHybridStudy");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificInnovationPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Innovation", "Innovation")
                        .WithMany()
                        .HasForeignKey("InnovationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Innovation");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificInstinctPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Instinct", "RequiredInstinct")
                        .WithMany()
                        .HasForeignKey("RequiredInstinctId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredInstinct");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificLanguagePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificLoreSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Lore", "RequiredLore")
                        .WithMany()
                        .HasForeignKey("RequiredLoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredLore");

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMagicSchoolPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", "RequiredMagicSchool")
                        .WithMany()
                        .HasForeignKey("RequiredMagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredMagicSchool");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMagicTraditionPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicTradition", "RequiredMagicTradition")
                        .WithMany()
                        .HasForeignKey("RequiredMagicTraditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredMagicTradition");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMeleeWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.MeleeWeapon", "RequiredMeleeWeapon")
                        .WithMany()
                        .HasForeignKey("RequiredMeleeWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredMeleeWeapon");

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMethodologyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Methodology", "RequiredMethodology")
                        .WithMany()
                        .HasForeignKey("RequiredMethodologyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredMethodology");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificMusePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Muse", "RequiredMuse")
                        .WithMany()
                        .HasForeignKey("RequiredMuseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredMuse");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificRacketPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Racket", "RequiredRacket")
                        .WithMany()
                        .HasForeignKey("RequiredRacketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredRacket");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificRangedWeaponSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.RangedWeapon", "RequiredRangedWeapon")
                        .WithMany()
                        .HasForeignKey("RequiredRangedWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");

                    b.Navigation("RequiredRangedWeapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificRecallKnowledgeProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSavingThrowSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.SavingThrowStat", "RequiredSavingThrowStat")
                        .WithMany()
                        .HasForeignKey("RequiredSavingThrowStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");

                    b.Navigation("RequiredSavingThrowStat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSensePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Sense", "RequiredSense")
                        .WithMany()
                        .HasForeignKey("RequiredSenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredSense");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSizePrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.AncestrySize", "RequiredSize")
                        .WithMany()
                        .HasForeignKey("RequiredSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredSize");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSkillProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Skill", "RequiredSkill")
                        .WithMany()
                        .HasForeignKey("RequiredSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");

                    b.Navigation("RequiredSkill");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSpellAttackProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId");

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSpellDcProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId");

                    b.Navigation("RequiredProficiency");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificSpellPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", "RequiredSpell")
                        .WithMany()
                        .HasForeignKey("RequiredSpellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredSpell");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificStatPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", "RequiredStat")
                        .WithMany()
                        .HasForeignKey("RequiredStatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredStat");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificTenetPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Tenet", "RequiredTennet")
                        .WithMany()
                        .HasForeignKey("RequiredTennetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredTennet");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificTraitPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", "RequiredTrait")
                        .WithMany()
                        .HasForeignKey("RequiredTraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredTrait");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificUnarmedAttackPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.UnarmedWeapon", "RequiredUnarmedWeapon")
                        .WithMany()
                        .HasForeignKey("RequiredUnarmedWeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredUnarmedWeapon");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificWeaponCategorySpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", "RequiredWeaponCategory")
                        .WithMany()
                        .HasForeignKey("RequiredWeaponCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");

                    b.Navigation("RequiredWeaponCategory");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.HaveSpecificWeaponGroupSpecificProficiencyPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Proficiency", "RequiredProficiency")
                        .WithMany()
                        .HasForeignKey("RequiredProficiencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", "RequiredWeaponGroup")
                        .WithMany()
                        .HasForeignKey("RequiredWeaponGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredProficiency");

                    b.Navigation("RequiredWeaponGroup");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.Instances.WorshipSpecificDeityPrerequisite", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Deity", "RequiredDeity")
                        .WithMany()
                        .HasForeignKey("RequiredDeityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RequiredDeity");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.ArmorPropertyRune", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("ArmorPropertyRunes")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.FundamentalArmorRune", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("FundamentalArmorRunes")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.FundamentalWeaponRune", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("FundamentalWeaponRunes")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.WeaponPropertyRune", b =>
                {
                    b.HasOne("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", null)
                        .WithMany("WeaponPropertyRunes")
                        .HasForeignKey("TraitId");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.BaseEffect", b =>
                {
                    b.Navigation("Increments");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ActionType", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Feats");

                    b.Navigation("Spells");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Alignment", b =>
                {
                    b.Navigation("Artifacts");

                    b.Navigation("Causes");

                    b.Navigation("Deities");

                    b.Navigation("Planes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Archetype", b =>
                {
                    b.Navigation("Feats");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorCategory", b =>
                {
                    b.Navigation("Armors");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ArmorGroup", b =>
                {
                    b.Navigation("Armors");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Class", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("Features");

                    b.Navigation("Instincts");

                    b.Navigation("Mannerisms");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ConditionCategory", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Creature", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.CreatureRecallKnowledge", b =>
                {
                    b.Navigation("Creature")
                        .IsRequired();
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DeityCategory", b =>
                {
                    b.Navigation("Deities");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Disease", b =>
                {
                    b.Navigation("Stages");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.DiseaseStage", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.EffectShape", b =>
                {
                    b.Navigation("DraconicExemplars");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Eidolon", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("HomePlanes");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Hazard", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Attacks");

                    b.Navigation("DisableRequirements");

                    b.Navigation("DispellRequirements");

                    b.Navigation("HazardComponents");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardComplexity", b =>
                {
                    b.Navigation("Hazards");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.HazardType", b =>
                {
                    b.Navigation("Hazards");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAction", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InlineAttack", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Innovation", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.InnovationModificationType", b =>
                {
                    b.Navigation("Modifications");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.LanguageType", b =>
                {
                    b.Navigation("Languages");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MagicSchool", b =>
                {
                    b.Navigation("ProibitedByRuneMagic");

                    b.Navigation("RuneMagicSchool");

                    b.Navigation("Spells");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.MysteryCurse", b =>
                {
                    b.Navigation("Mystery")
                        .IsRequired();

                    b.Navigation("Potencies");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.ObjectGrade", b =>
                {
                    b.Navigation("ArmorVariants");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Philosophy", b =>
                {
                    b.Navigation("FollowAlignments");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PlaneCategory", b =>
                {
                    b.Navigation("Planes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Potency", b =>
                {
                    b.Navigation("AlchemicalBombs");

                    b.Navigation("AlchemicalTools");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterial", b =>
                {
                    b.Navigation("ObjectInformations");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialArmor", b =>
                {
                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialObjectCategory", b =>
                {
                    b.Navigation("ObjectInformations");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialShield", b =>
                {
                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.PreciousMaterialWeapon", b =>
                {
                    b.Navigation("Material")
                        .IsRequired();

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Rarity", b =>
                {
                    b.Navigation("Ancestries");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.RuneMagic", b =>
                {
                    b.Navigation("ProhibitedSchools");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SkillAction", b =>
                {
                    b.Navigation("Examples");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Spell", b =>
                {
                    b.Navigation("AdvancedRevelationOf");

                    b.Navigation("GrantedBy");

                    b.Navigation("GreaterRevelationOf");

                    b.Navigation("Heightenings");

                    b.Navigation("InitialRevelationOf");

                    b.Navigation("InlineActions");

                    b.Navigation("RollableEffects");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.SpellType", b =>
                {
                    b.Navigation("Spells");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffect", b =>
                {
                    b.Navigation("Stages");

                    b.Navigation("Traits");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.StaggeredEffectStage", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Stat", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.Trait", b =>
                {
                    b.Navigation("AlchemicalBombs");

                    b.Navigation("AlchemicalElixirs");

                    b.Navigation("AlchemicalPoisons");

                    b.Navigation("AlchemicalTools");

                    b.Navigation("ArmorPropertyRunes");

                    b.Navigation("Armors");

                    b.Navigation("Artifacts");

                    b.Navigation("BeastGuns");

                    b.Navigation("CombinationWeapons");

                    b.Navigation("FundamentalArmorRunes");

                    b.Navigation("FundamentalWeaponRunes");

                    b.Navigation("MeleeWeapons");

                    b.Navigation("RangedWeapons");

                    b.Navigation("Spells");

                    b.Navigation("Staves");

                    b.Navigation("WeaponPropertyRunes");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.UtilityGear", b =>
                {
                    b.Navigation("InlineActions");

                    b.Navigation("TraitBindings");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponCategory", b =>
                {
                    b.Navigation("MeleeWeapons");

                    b.Navigation("RangedWeapons");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Entities.WeaponGroup", b =>
                {
                    b.Navigation("MeleeWeapons");

                    b.Navigation("RangedWeapons");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItem", b =>
                {
                    b.Navigation("InlineActions");

                    b.Navigation("TraitBindings");

                    b.Navigation("Variants");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.BaseItemVariant", b =>
                {
                    b.Navigation("InlineActions");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.CombinationWeaponComponent", b =>
                {
                    b.Navigation("TraitBindings");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Row", b =>
                {
                    b.Navigation("Cells");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Utilities.Tables.Table", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Rows");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.BooleanEffect", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Effects.ChoiceEffect", b =>
                {
                    b.Navigation("Entries");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Items.Instances.StaveVariant", b =>
                {
                    b.Navigation("Spells");
                });

            modelBuilder.Entity("Silvester.Pathfinder.Reference.Database.Models.Prerequisites.BooleanPrerequisite", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
